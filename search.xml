<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo-NexT升级和配置记录</title>
    <url>/posts/7905.html</url>
    <content><![CDATA[<p>我的博客是2018年建立的，使用的Hexo和NexT主题，如今已经2020年了，想着过了这么久了，是时候将它们的版本升级一下了，在升级的时候顺便对博客内容做了一些整理和优化，遇到一些问题，记录一下。<br><span id="more"></span></p>
<h3 id="备份源文件"><a href="#备份源文件" class="headerlink" title="备份源文件"></a>备份源文件</h3><p>将文章的源文件进行安全的备份，防止意外导致内容的丢失。</p>
<h3 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 升级hexo脚手架</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line"><span class="comment"># 切换到博客项目的目录下，升级博客hexo版本</span></span><br><span class="line">npm install </span><br></pre></td></tr></table></figure>
<h3 id="升级Next主题"><a href="#升级Next主题" class="headerlink" title="升级Next主题"></a>升级Next主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到博客目录下，删除旧版本的next主题</span></span><br><span class="line"><span class="built_in">rm</span> -rf themes/next</span><br><span class="line"><span class="comment"># 拉取最新版本的主题文件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>博客之前使用的是微博图床，免费、高速而且还没有流量限制，但是因为最近微博开始反盗链，图片挂的严重，很难去一一排查图片的失效连接，索性趁着这次升级的机会，将图床直接做了更换，我换了质量还不错的<a href="https://sm.ms/">SM.MS</a>图床，注册之后有免费的5G空间可以使用，图片大小限制5M，每分钟限制20张上传，每小时限制100张，我这种小博客用免费版本应该是绰绰有余了。</p>
<p>Github上有图片上传工具：<a href="https://molunerfinn.com/PicGo/">PicGo</a>，支持主流的几个图床，使用SM.MS图床上传图片需要配置一个插件：<a href="https://github.com/xlzy520/picgo-plugin-smms-user">picgo-plugin-smms-user</a>，具体的配置可以参看插件的使用介绍。</p>
<h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><p>Hexo的配置文件为<code>_config.yml</code>，在博客的根目录下。</p>
<h4 id="文章地址"><a href="#文章地址" class="headerlink" title="文章地址"></a>文章地址</h4><p>默认的文章地址是文章发布的日期加文章标题，这样的地址显得太冗长而且不利于标记，我发现一个比较好的文章地址生成插件，以不重复的随机数来作为文章ID去标记地址：<a href="https://github.com/rozbo/hexo-abbrlink">Github:hexo-abbrlink</a>，使用该插件之后，编译时会在每篇文章的头部自动添加<code>abbrlink</code>属性来作为文章的标记。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装hexo-abbrlink</span></span><br><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>
<p>修改 <code>_config.yml</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span></span><br></pre></td></tr></table></figure>
<h4 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h4><p>文章编译之后可以发布到Github，这些操作需要自己去完成，其实有工具可以实现自动部署：<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装hexo-deployer-git</span></span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改<code>_config.yml</code>，部署的方式有多种，最常用的是git，我的博客仓库有两个分支，一个master分支用来发布文章，存放编译后的文件，还有一个source分支，存放markdown源文件、图片和一些配置文件。<code>ignore_pattern</code>属性是配置忽略文件的，我将图片和部分二进制文件都做了忽略。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/glieen/HexoBlog.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">ignore_pattern:</span></span><br><span class="line">    <span class="attr">public:</span> <span class="string">post-image|about-image|files</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动部署</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h4 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h4><p>Github配置404文件非常简单，只需要在source目录下创建<code>404.html</code>文件即可，404页面只对绑定的域名生效，本地测试是无法看到的，我使用的是腾讯的404页面，内容如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">homePageName</span>=<span class="string">&quot;返回博客首页&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h4><p>默认的文章排序是以时间倒叙排列的，如果想置顶某文章需要依赖其他的第三方工具：<a href="https://github.com/netcan/hexo-generator-index-pin-top">hexo-generator-index-pin-top</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-generator-index --save</span><br><span class="line">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>
<p>使用置顶功能时，在文章的头部增加<code>top: true</code>即可。</p>
<h4 id="编译忽略"><a href="#编译忽略" class="headerlink" title="编译忽略"></a>编译忽略</h4><p>修改<code>_config.yml</code>中的<code>skip_render</code>属性，将需要忽略的文件添加到规则中。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> [<span class="string">README.md</span>,<span class="string">&#x27;*.html&#x27;</span>,<span class="string">CNAME</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Next配置"><a href="#Next配置" class="headerlink" title="Next配置"></a>Next配置</h3><p>Next的配置文件为<code>_config.yml</code>，在主题的根目录下，主题的配置项繁多，我并未全部使用，更具体的可以查看官方文档：<a href="https://theme-next.iissnan.com/">Next</a>，主题的配置主要是修改配置文件中的各个属性。</p>
<h4 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h4><p>Next内置4种内容布局，属性是<code>scheme</code>，默认使用的是<code>Muse</code>，我选择使用的是<code>Gemini</code>，将想要使用的布局前面的<code>#</code>去掉即可启用。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>
<h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><p>导航在<code>menu</code>属性下，主题内置了几个导航，去掉注释就可以启用，可以自定义导肮，配置好路由和图标即可，路由可以是博客内的任一页面，也可以是外网的地址，图标使用的是<code>Font Awesome icon</code>。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">notes:</span> <span class="string">/notes/</span> <span class="string">||</span> <span class="string">book</span></span><br><span class="line">  <span class="attr">favorites:</span> <span class="string">/favorites/</span> <span class="string">||</span> <span class="string">star</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">https://leancloud.cn/dashboard/</span> <span class="string">||</span> <span class="string">comment</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<p>其中<code>favorite</code>和<code>comment</code>是我自定义的导航，<code>favorite</code>是博客内部我自己建立的收藏页面，<code>comment</code>是指向<a href="https://leancloud.cn/">LeanCloud</a>的评论管理页面，自定义的导航无法显示中文名，需要修改中文配置文件，文件位于<code>languages/zh-CN.yml</code>，将新增的导航添加进去即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">notes:</span> <span class="string">笔记</span></span><br><span class="line">  <span class="attr">favorites:</span> <span class="string">收藏</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">评论</span></span><br></pre></td></tr></table></figure>
<h4 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h4><p>设置自己头像的URL即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>
<h4 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h4><p>配置与导航类似，配置好地址和图标即可，内置了几个，去掉注释就可以启用。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/glieen</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:glieen1995@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br><span class="line">  <span class="comment">#RSS: /atom.xml || rss</span></span><br></pre></td></tr></table></figure>
<h4 id="友链"><a href="#友链" class="headerlink" title="友链"></a>友链</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">友链</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">YmTonny :</span> <span class="string">https://ymtonny.cn/</span></span><br><span class="line">  <span class="string">Zalmon&#x27;s</span> <span class="attr">Blog :</span> <span class="string">https://zalmon.cn/</span></span><br></pre></td></tr></table></figure>
<h4 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h4><p>生成订阅文件，用于RSS订阅更新获取最新的文章发布信息，需要安装插件启用该功能：<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>
<p>将以下的配置信息加入到主题的配置文件当中：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">icon.png</span></span><br><span class="line">  <span class="attr">autodiscovery:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">template:</span></span><br></pre></td></tr></table></figure>
<h4 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h4><p>字数统计可以统计整站的字符数，每篇文章的字符数以及阅读时间，需要配合插件启用该功能：<a href="https://github.com/theme-next/hexo-symbols-count-time">hexo-symbols-count-time</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span></span><br></pre></td></tr></table></figure>
<h4 id="阅读进度"><a href="#阅读进度" class="headerlink" title="阅读进度"></a>阅读进度</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;#37c6c0&quot;</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br></pre></td></tr></table></figure>
<h4 id="文章评论"><a href="#文章评论" class="headerlink" title="文章评论"></a>文章评论</h4><p>我使用的是<code>valine</code>评论系统，它是依托于<a href="https://www.leancloud.cn/">LeanCloud</a>的无后端评论系统，可以实现匿名评论，评论数统计和浏览量统计，可以前往<a href="https://valine.js.org/">Valine</a>了解更多关于该评论系统的内容，使用时只需将它启用，并配置好自己的<code>appid</code>和<code>appkey</code>即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">APPID</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">APPKEY</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">支持Markdown语法</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">identicon</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>
<p>因为在最新版本的Next中采用了多评论系统的设计，在使用<code>valine</code>时，出现了一些问题，比如标题下的评论数无法显示中文，且点击评论数的锚点无法定位到评论框，这里需要去修改next中的源文件才能修复，找到并打开主题目录下的<code>scripts/filters/comment/valine.js</code>文件，做以下的修改。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原内容</span></span><br><span class="line">$&#123;<span class="title function_">iconText</span>(<span class="string">&#x27;comment-o&#x27;</span>, <span class="string">&#x27;valine&#x27;</span>)&#125;</span><br><span class="line">&lt;a title=<span class="string">&quot;valine&quot;</span> href=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;#comments&quot;</span> itemprop=<span class="string">&quot;discussionUrl&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改后的内容</span></span><br><span class="line">$&#123;<span class="title function_">iconText</span>(<span class="string">&#x27;comment-o&#x27;</span>, <span class="string">&#x27;valine&#x27;</span>,<span class="string">&#x27;评论数&#x27;</span>)&#125;</span><br><span class="line">&lt;a title=<span class="string">&quot;valine&quot;</span> href=<span class="string">&quot;#valine-comments&quot;</span> itemprop=<span class="string">&quot;discussionUrl&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>修改文章头部的<code>comments</code>属性可以开关文章评论功能，<code>true</code>开启，<code>false</code>关闭。</p>
<h4 id="访问计数"><a href="#访问计数" class="headerlink" title="访问计数"></a>访问计数</h4><p>Next内置多种访问计数方式，我使用的是不蒜子，直接启用即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br></pre></td></tr></table></figure>
<h4 id="文章搜索"><a href="#文章搜索" class="headerlink" title="文章搜索"></a>文章搜索</h4><p>可以在Next中启用文章搜索功能，启用该功能需要安装文章内容搜索插件：<a href="https://github.com/theme-next/hexo-generator-searchdb">hexo-generator-searchdb</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>修改主题配置文件<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>修改Hexo配置文件<code>_config.yml</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<h4 id="背景变幻线"><a href="#背景变幻线" class="headerlink" title="背景变幻线"></a>背景变幻线</h4><p>添加依赖库：<a href="https://github.com/theme-next/theme-next-canvas-nest">theme-next-canvas-nest</a>，启用功能即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest themes/next/source/lib/canvas-nest</span><br></pre></td></tr></table></figure>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">true</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;0,0,255&quot;</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.5</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">150</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Integer的拆装箱和缓存</title>
    <url>/posts/52411.html</url>
    <content><![CDATA[<p>Integer作为基础类型int的包装类，提供了非常多的功能，增强了基础类型的一些方法使用，但是在使用的时候还是有一些问题需要注意的。</p>
<span id="more"></span>
<h3 id="true还是false？"><a href="#true还是false？" class="headerlink" title="true还是false？"></a>true还是false？</h3><p>咱们先看下面这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        System.out.println(i1 == i2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">200</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">200</span>);</span><br><span class="line">        System.out.println(i3 == i4);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">        System.out.println(i5 == i6);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<blockquote>
<p>true<br>false<br>false</p>
</blockquote>
<p><code>i3 == i4</code>返回结果为<code>false</code>可能会很容易理解，使用new关键字创建两个类，应当为其分配不同的内存空间，所以它们的地址应该是不同的。但是为什么<code>i1 == i2</code>返回结果为<code>true</code>，而<code>i5 == i6</code>返回结果为<code>false</code>呢？</p>
<h3 id="自动装箱"><a href="#自动装箱" class="headerlink" title="自动装箱"></a>自动装箱</h3><p>实际上当给Integer对象赋值为数值对象时，Java虚拟机会执行装箱操作，就是将基础数据类型封装成对应的包装类，其底层调用的方法是Integer中的静态方法<code>Integer.valueOf(int i)</code>，那我们来看看这个方法具体是怎么做的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></span><br><span class="line"><span class="comment"> * required, this method should generally be used in preference to</span></span><br><span class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class="line"><span class="comment"> * to yield significantly better space and time performance by</span></span><br><span class="line"><span class="comment"> * caching frequently requested values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></span><br><span class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过注解我们可以看到，这个方法会返回一个Integer对象的实例，当对象值处于<code>-128 ~ 127</code>之间时，从缓存中返回实例，不处于区间之中则通过new关键字创建一个实例并返回。</p>
<p>IntegerCache是Integer类中的一个内部类，Java虚拟机会用它做一个对象的缓存池，缓存整型值介于<code>-128 ~ 127</code>之间的Integer对象实例，用以提升Java的性能。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>回到代码中，现在结论就应该很清楚了，i1和i2取值都为1，介于<code>-128 ~ 127</code>之间，所以直接返回的是缓存池中的实例，所以它们都指向同一个对象，地址是相等的，i5和i6取值都为200，不在缓存池中，所以都是新创建的对象实例，所以它们的地址不相等。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的数与位</title>
    <url>/posts/32034.html</url>
    <content><![CDATA[<p>世界上只有10种人，一种是认识二进制的，一种是不认识的。认识程序要从二进制开始，了解Java中的二进制计算规则也必不可少。</p>
<span id="more"></span>
<h3 id="位"><a href="#位" class="headerlink" title="位"></a>位</h3><p>自打计算机问世开始，高低电平就一直伴随至今，低电平表示0，高电平表示1，这便构成了计算机中数据存储的最小单位：位。位，记为b，也叫比特（bit），每个0或者1就是一个位。</p>
<h3 id="数"><a href="#数" class="headerlink" title="数"></a>数</h3><p>自然生活中接触最多的是十进制数，但是计算机只认识0和1，只能用二进制来表示一个数，所以计算机在计算和存储时，会将所有的数据都转换成二进制，也叫做机器数。为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p>
<p>计算机中的数有三种表示方法：原码、反码和补码，以下都以一个字节（byte）的有符号数为例。</p>
<h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>原码是十进制数到二进制的直接转换，是人最容易接受和理解的一种表示法。最高位是符号位，表示正负，其余位是二进制表示的数，因为第一位表示符号位，所以byte的取值范围是[-127,127]。</p>
<h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p>反码是在原码的基础上的一种变化，反码的应用比较少：</p>
<ul>
<li>对于正数，反码和原码一致；</li>
<li>对于负数，在原码的基础上，保持符号位不变，其余位取反。</li>
</ul>
<h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>补码是在补码上的有一种改进，<strong>计算机中的数值都是以补码的形式来计算和存储的</strong>：</p>
<ul>
<li>对于正数，补码和原码一致；</li>
<li>对于负数，在原码的基础上，保持符号位不变，其余位取反，然后+1，即反码+1，规定-128的补码是[10000000]。</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">真值</th>
<th style="text-align:center">+5</th>
<th style="text-align:center">-5</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">原码</td>
<td style="text-align:center">00000101</td>
<td style="text-align:center">10000101</td>
</tr>
<tr>
<td style="text-align:center">反码</td>
<td style="text-align:center">00000101</td>
<td style="text-align:center">11111010</td>
</tr>
<tr>
<td style="text-align:center">补码</td>
<td style="text-align:center">00000101</td>
<td style="text-align:center">11111011</td>
</tr>
</tbody>
</table>
</div>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>原码，这是最符合直觉的：</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [10000010]原 = -2
\end{aligned}</script><p>如果用原码表示，让符号位也参与计算，显然对于减法来说， 结果是不正确的，这也是为何计算机内部不使用原码表示一个数的原因。</p>
<p>反码：</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 - 1 = 1 + (-1) = [00000001]原 + [10000001]原 = [00000001]反 + [11111110]反 = [11111111]反 = [10000000]原 = -0
\end{aligned}</script><p>用反码进行计算，虽然真值部分计算正确，但是存在+0和-0两个0的表示总是有点让人困惑的。</p>
<p>补码：</p>
<script type="math/tex; mode=display">
\begin{aligned}
1 - 1 = 1 + (-1) = [00000001]原 + [10000001][原 = [00000001]补 + [11111111]补 = [00000000]补 = [00000000]原 = 0 \\
-1 - 127 = (-1) + (-127) = [10000001]原 + [11111111]原 = [11111111]补 + [10000001]补 = [10000000]补 = -128
\end{aligned}</script><p>正负数的加减法可以用补码正确计算，且使用[10000000]来表示-128，也解决了0的表示问题，所以最后计算机采用补码来对数值进行计算和存储。</p>
<p><strong>同余：</strong>补码的另一种理解方式，8位只能表示256个数，如果想用其中的一部分表示负数怎么办，可以使用与该负数同余的正数来表示，比如，-1=255，-4=252，转换成二进制就是负数的补码表示形式。</p>
<script type="math/tex; mode=display">
\begin{aligned}
-1 = [10000001]原 = [11111111]补 \\
-4 = [10000100]原 = [11111100]补
\end{aligned}</script><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>计算机对二进制是友好的，二进制运算有时候可以极大的提升运算的速度。Java中数值都是以补码的形式参与位运算的，并且除<code>~</code>外，只能用于整型。当用于byte、short和char时，会发生类型提升，会先转换成int再进行运算。</p>
<h4 id="按位与"><a href="#按位与" class="headerlink" title="按位与"></a>按位与</h4><p>按位与<code>&amp;</code>是二目运算符，将两个数对应的二进制位进行与操作，同1为1，其余为0。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h4 id="按位或"><a href="#按位或" class="headerlink" title="按位或"></a>按位或</h4><p>按位或<code>|</code>是二目运算符，将两个数对应的二进制位进行或操作，同0为0，其余为1。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h4 id="按位异或"><a href="#按位异或" class="headerlink" title="按位异或"></a>按位异或</h4><p>按位异或<code>^</code>是二目运算符，将两个数对应的二进制位进行异或操作，不同为1，相同为0。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">1</th>
<th style="text-align:center">0</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
</tbody>
</table>
</div>
<h4 id="按位非"><a href="#按位非" class="headerlink" title="按位非"></a>按位非</h4><p>按位非<code>~</code>是一目运算符，将数值的二进制所有位进行取反操作，1变为0，0变为1。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">取反前</th>
<th style="text-align:center">取反后</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">0</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<h4 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h4><p>左移<code>&lt;&lt;</code>是二目运算符，符号位不变，将数值的其他二进制位整体向左移动指定的位数，空白位填充0。</p>
<h4 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h4><p>右移<code>&gt;&gt;</code>是二目运算符，符号位不变，将数值的其他二进制位整体向右移动指定的位数，空白位填充0。</p>
<h4 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h4><p>无符号右移<code>&gt;&gt;&gt;</code>是二目运算符，将数值的所有二进制位（包括符号位）整体向右移动指定的位数，空白位填充0。</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> -<span class="number">5</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;a= %32s(%d)%n&quot;</span>, Integer.toBinaryString(a), a);</span><br><span class="line">        System.out.printf(<span class="string">&quot;b= %32s(%d)%n&quot;</span>, Integer.toBinaryString(b), b);</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a &amp; b;</span><br><span class="line">        System.out.printf(<span class="string">&quot;c= %32s(%d)%n&quot;</span>, Integer.toBinaryString(c), c);</span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> a | b;</span><br><span class="line">        System.out.printf(<span class="string">&quot;d= %32s(%d)%n&quot;</span>, Integer.toBinaryString(d), d);</span><br><span class="line">        <span class="type">int</span> <span class="variable">e</span> <span class="operator">=</span> a ^ b;</span><br><span class="line">        System.out.printf(<span class="string">&quot;e= %32s(%d)%n&quot;</span>, Integer.toBinaryString(e), e);</span><br><span class="line">        <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> ~a;</span><br><span class="line">        System.out.printf(<span class="string">&quot;f= %32s(%d)%n&quot;</span>, Integer.toBinaryString(f), f);</span><br><span class="line">        <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> a &lt;&lt; <span class="number">2</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;g= %32s(%d)%n&quot;</span>, Integer.toBinaryString(g), g);</span><br><span class="line">        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> b &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;h= %32s(%d)%n&quot;</span>, Integer.toBinaryString(h), h);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> b &gt;&gt;&gt; <span class="number">10</span>;</span><br><span class="line">        System.out.printf(<span class="string">&quot;i= %32s(%d)%n&quot;</span>, Integer.toBinaryString(i), i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// a=                              110(6)</span></span><br><span class="line"><span class="comment">// b= 11111111111111111111111111111011(-5)</span></span><br><span class="line"><span class="comment">// c=                               10(2)</span></span><br><span class="line"><span class="comment">// d= 11111111111111111111111111111111(-1)</span></span><br><span class="line"><span class="comment">// e= 11111111111111111111111111111101(-3)</span></span><br><span class="line"><span class="comment">// f= 11111111111111111111111111111001(-7)</span></span><br><span class="line"><span class="comment">// g=                            11000(24)</span></span><br><span class="line"><span class="comment">// h= 11111111111111111111111111111111(-1)</span></span><br><span class="line"><span class="comment">// i=           1111111111111111111111(4194303)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>原码</tag>
        <tag>补码</tag>
        <tag>反码</tag>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级特性「反射」</title>
    <url>/posts/62397.html</url>
    <content><![CDATA[<p>在Java开发中，反射是一个经常用到的技术，几乎所有的框架都有使用反射机制，反射作为Java的一种高级特性，在实际生产中被大量应用，掌握它就显得尤为必要了。</p>
<span id="more"></span>
<h3 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h3><p>反射机制是Java 语言的特性之一，所谓的反射就是Java语言在运行时拥有的一项自观的能力。在Java运行时环境中，对于任意一个类，可以知道这个类有哪些属性和方法；对于任意一个对象，可以调用它的任意一个方法。这种动态获取类的信息以及动态调用对象的方法的能力就是Java 语言的反射（Reflection）机制。 </p>
<h3 id="万物皆对象"><a href="#万物皆对象" class="headerlink" title="万物皆对象"></a>万物皆对象</h3><p>Java是面向对象的高级语言，在面向对象的世界里，万事万物皆是对象，那么类是不是对象呢？是的，我们写的每一个类都是<code>Class</code>类的对象。每一个类有自己的对象，同时也是<code>Class</code>类的对象，想要了解反射，就必须先了解<code>Class</code>这个类。</p>
<h4 id="java-lang-Class"><a href="#java-lang-Class" class="headerlink" title="java.lang.Class"></a>java.lang.Class</h4><p>构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Private constructor. Only the Java Virtual Machine creates Class objects.</span></span><br><span class="line"><span class="comment">    * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment">    * generated.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="title function_">Class</span><span class="params">(ClassLoader loader)</span> &#123;</span><br><span class="line">       classLoader = loader;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>根据注释可知，<code>Class</code>类的构造方法是私有的，只有 Java 虚拟机可以创建该类的对象，因此我们无法在代码中显式地声明一个 <code>Class</code>对象。</p>
<h4 id="获取Class类的对象"><a href="#获取Class类的对象" class="headerlink" title="获取Class类的对象"></a>获取Class类的对象</h4><p>声明一个<code>Person</code>类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略setter和getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面说过，<code>Class</code> 类的构造方法是私有的，只有 java 虚拟机可以调用该方法创建该类的对象。也就是说我们无法像定义普通类对象一样，通过 new 直接创建 <code>Class</code> 类的对象，那应该如何得到<code>Person</code>的类对象呢？有以下几种方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class clazz;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、通过类的静态成员得到Person的类对象，每一个类都有一个隐含的静态成员class</span></span><br><span class="line">        clazz = Person.class;</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、通过Person类的实例得到它的Class对象</span></span><br><span class="line">        clazz = person.getClass();</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、通过Class的静态方法forName(className)得到类对象，这里注意处理异常</span></span><br><span class="line">        clazz = Class.forName(<span class="string">&quot;cn.glieen.pojo.Person&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从运行结果可以看到，我们都能得到<code>Person</code> 的<code>Class</code>对象。</p>
<p><img src="https://i.loli.net/2020/02/19/V9loZ3irDqbaJS2.jpg" alt="62397-1.jpg"></p>
<p>实际使用当中，最常用的是第三种方法，该方法可以实现类的动态加载，在使用时才加载该类。</p>
<h3 id="反射的基本运用"><a href="#反射的基本运用" class="headerlink" title="反射的基本运用"></a>反射的基本运用</h3><h4 id="得到类的成员（constructor、field、method）"><a href="#得到类的成员（constructor、field、method）" class="headerlink" title="得到类的成员（constructor、field、method）"></a>得到类的成员（constructor、field、method）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 得到类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;cn.glieen.pojo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的构造方法</span></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor : constructors) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;constructor = &quot;</span> + constructor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的成员变量</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;field = &quot;</span> + field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取类的成员方法</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://i.loli.net/2020/02/19/zZWRhT79BCpeFMx.jpg" alt="62397-2.jpg"></p>
<p>由运行结果我们可以看到，<code>Person</code>类的构造方法，成员变量和成员方法都获取到了，<strong>值得注意的是</strong>，<code>getConstructors()</code>、<code>getFields()</code>和<code>getMethods()</code>只能得到类中公有的成员属性，如果想得到私有的成员属性，需要调用<code>getDeclaredConstructors()</code>、<code>getDeclaredFields()</code>和<code>getDeclaredMethods()</code>方法。</p>
<h4 id="得到类的实例"><a href="#得到类的实例" class="headerlink" title="得到类的实例"></a>得到类的实例</h4><p>通过<code>Class</code>类的<code>newInstance()</code>方法可以得到<code>Class</code>对象所指类的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br></pre></td></tr></table></figure>
<p><strong>需要注意的是:</strong><code>clazz.newInstance()</code>会调用<code>Person</code>类的无参构造方法，当<code>Person</code>类不存在无参构造方法时，程序会抛出<code>InstantiationException</code>异常，所以当决定使用动态加载时，应当保留类中公有无参的构造器。</p>
<h4 id="反射调用类中的方法"><a href="#反射调用类中的方法" class="headerlink" title="反射调用类中的方法"></a>反射调用类中的方法</h4><p>通过反射可以调用类中的各个方法，下面代码利用反射为<code>Person</code>对象的成员变量注入值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">// 得到类的Class对象</span></span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;cn.glieen.pojo.Person&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过Class的对象得到Person类的实例，注意强制转型和异常处理</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> (Person) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到类中的成员变量</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fieldName</span> <span class="operator">=</span> field.getName();</span><br><span class="line">            <span class="comment">// 得到成员变量的setter方法</span></span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;set&quot;</span> + fieldName.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + fieldName.substring(<span class="number">1</span>), field.getType());</span><br><span class="line">            <span class="keyword">if</span> (field.getGenericType().equals(String.class)) &#123;</span><br><span class="line">                <span class="comment">// 反射调用setter方法</span></span><br><span class="line">                method.invoke(person, <span class="string">&quot;glieen&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (field.getGenericType().equals(<span class="type">int</span>.class)) &#123;</span><br><span class="line">                method.invoke(person, <span class="number">23</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(person);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://i.loli.net/2020/02/19/lF16ep3BhiHX5mw.jpg" alt="62397-3.jpg"></p>
<p>反射不仅可以调用普通方法，私有方法，构造函数也是可以调用的，需要注意的是调用私有方法之前应当使用<code>method.setAccessible(true)</code>改变方法可见性，否则调用时会抛出异常。</p>
<h3 id="java-lang-reflect"><a href="#java-lang-reflect" class="headerlink" title="java.lang.reflect"></a>java.lang.reflect</h3><p><code>java.lang.reflect</code>包提供了用于获取类和对象的反射信息的类和接口。反射API允许对程序访问有关加载类的字段，方法和构造函数的信息进行编程访问。它允许在安全限制内使用反射的字段，方法和构造函数对其底层对等进行操作。 </p>
<p><code>java.lang.reflect</code>包下有几个比较重要的类，<code>java.lang.reflect.Field</code>，<code>java.lang.reflect.Method</code>，<code>java.lang.reflect.Type</code>，<code>java.lang.reflect.Constructor</code>，在反射的使用中是经常会用到的，这里我就不过多阐述了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>反射作为Java最核心机制之一，已经被普遍使用于各大框架和项目之中，理解并掌握反射将会使得编写和阅读代码更加高效。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基本数据类型</title>
    <url>/posts/31202.html</url>
    <content><![CDATA[<p>Java是一种强类型语言，在声明变量的时必须指定数据类型。Java数据类型分为基本数据类型和引用类型，基本数据类型分为8种，也是我们编程中使用最频繁的类型，本篇文章简要介绍Java的八大数据类型。</p>
<span id="more"></span>
<h3 id="八大数据类型一览"><a href="#八大数据类型一览" class="headerlink" title="八大数据类型一览"></a>八大数据类型一览</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">类型名称</th>
<th style="text-align:center">类型定义</th>
<th style="text-align:center">占用大小</th>
<th style="text-align:center">取值范围</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">封装类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">布尔值，用作二元判断</td>
<td style="text-align:center">Java规范中，没有明确指出boolean的大小。JVM规范中，boolean变量作为int处理，也就是4字节，boolean数组当做byte数组处理。</td>
<td style="text-align:center">true,false</td>
<td style="text-align:center">false</td>
<td style="text-align:center">java.lang.Boolean</td>
</tr>
<tr>
<td style="text-align:center">char</td>
<td style="text-align:center">Unicode字符</td>
<td style="text-align:center">2字节/16位</td>
<td style="text-align:center"><code>\u0000</code> ~ <code>\uffff</code></td>
<td style="text-align:center"><code>\u0000</code></td>
<td style="text-align:center">java.lang.Character</td>
</tr>
<tr>
<td style="text-align:center">byte</td>
<td style="text-align:center">有符号整数</td>
<td style="text-align:center">1字节/8位</td>
<td style="text-align:center">-128 ~ 127</td>
<td style="text-align:center">0</td>
<td style="text-align:center">java.lang.Byte</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">有符号整数</td>
<td style="text-align:center">2字节/16位</td>
<td style="text-align:center">-32768 ~ 32767</td>
<td style="text-align:center">0</td>
<td style="text-align:center">java.lang.Short</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">有符号整数</td>
<td style="text-align:center">4字节/32位</td>
<td style="text-align:center">-2,147,483,648(-2^31) ~ 2,147,483,647(2^31-1)</td>
<td style="text-align:center">0</td>
<td style="text-align:center">java.lang.Integer</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">有符号整数</td>
<td style="text-align:center">8字节/64位</td>
<td style="text-align:center">-2^63 ~ 2^63-1</td>
<td style="text-align:center">0L</td>
<td style="text-align:center">java.lang.Long</td>
</tr>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">单精度浮点数</td>
<td style="text-align:center">4字节/32位</td>
<td style="text-align:center">1.4E-45 ~ 3.4028235E38</td>
<td style="text-align:center">0.0F</td>
<td style="text-align:center">java.lang.Float</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">双精度浮点数</td>
<td style="text-align:center">8字节/64位</td>
<td style="text-align:center">4.9E-324 ~ 1.7976931348623157E308</td>
<td style="text-align:center">0.0D</td>
<td style="text-align:center">java.lang.Double</td>
</tr>
</tbody>
</table>
</div>
<p><strong>注意：</strong>在Java中，默认声明的小数是double类型，默认声明的整数是int类型。</p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>整型、浮点型、字符型数据可以混合运算，运算中，不同类型的数据会转换成相同类型，然后进行运算。</p>
<blockquote>
<p>低 ———————————————————-&gt; 高</p>
<p>byte,short,char—&gt;int—&gt;long—&gt;float—&gt;double</p>
</blockquote>
<p>从低级转到高级是自动类型转换，这是一种默认的转换，从高级转到低级需要强制类型转换，这么做可能会导致精度丢失。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">byte</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line"><span class="comment">// 自动类型转换</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> a;</span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"><span class="comment">// 强制类型转换导致精度丢失，因为byte类型是8位，最大值为127，所以当int强制转换为byte类型时，值128时候就会导致溢出，此处d实际值位-128</span></span><br><span class="line"><span class="type">byte</span> <span class="variable">d</span> <span class="operator">=</span> (<span class="type">byte</span>) c;</span><br><span class="line"><span class="type">double</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">1.23</span>;</span><br><span class="line"><span class="comment">// 浮点型强制转换为整型是舍弃小数部分而不是四舍五入</span></span><br><span class="line"><span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">int</span>)e;</span><br></pre></td></tr></table></figure>
<p>char类型转换为整型时会转为字符对应的ASCII码值。</p>
<p>不能对boolean类型进行类型转换。</p>
<h3 id="类型的自动提升"><a href="#类型的自动提升" class="headerlink" title="类型的自动提升"></a>类型的自动提升</h3><p>在基本类型的混合运算中，最后的结果类型会是参与运算的最高级的类型， 关于类型的自动提升，注意下面的规则。</p>
<p>①所有的byte,short,char型的值将被提升为int型；</p>
<p>②如果有一个操作数是long型，计算结果是long型；</p>
<p>③如果有一个操作数是float型，计算结果是float型；</p>
<p>④如果有一个操作数是double型，计算结果是double型；</p>
<h3 id="整型的进制"><a href="#整型的进制" class="headerlink" title="整型的进制"></a>整型的进制</h3><p>Java中默认声明整型的进制为十进制，当然也可以通过特殊的表示方法表示常用的二进制，八进制和十六进制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 十进制表示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 二进制表示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0b1010</span>;</span><br><span class="line"><span class="comment">// 八进制表示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">01067</span>;</span><br><span class="line"><span class="comment">// 十六进制表示</span></span><br><span class="line"><span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0x2afc</span>;</span><br></pre></td></tr></table></figure>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Java中char类型包含一些特殊的转义字符，这些字符通常具有一些特殊的含义。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:center">字符含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><code>\n</code></td>
<td style="text-align:center">换行 (0x0a)</td>
</tr>
<tr>
<td style="text-align:center"><code>\r</code></td>
<td style="text-align:center">回车 (0x0d)</td>
</tr>
<tr>
<td style="text-align:center"><code>\f</code></td>
<td style="text-align:center">换页符(0x0c)</td>
</tr>
<tr>
<td style="text-align:center"><code>\b</code></td>
<td style="text-align:center">退格 (0x08)</td>
</tr>
<tr>
<td style="text-align:center"><code>\0</code></td>
<td style="text-align:center">空字符 (0x20)</td>
</tr>
<tr>
<td style="text-align:center"><code>\s</code></td>
<td style="text-align:center">字符串</td>
</tr>
<tr>
<td style="text-align:center"><code>\t</code></td>
<td style="text-align:center">制表符</td>
</tr>
<tr>
<td style="text-align:center"><code>\&quot;</code></td>
<td style="text-align:center">双引号</td>
</tr>
<tr>
<td style="text-align:center"><code>\&#39;</code></td>
<td style="text-align:center">单引号</td>
</tr>
<tr>
<td style="text-align:center"><code>\\</code></td>
<td style="text-align:center">反斜杠</td>
</tr>
<tr>
<td style="text-align:center"><code>\ddd</code></td>
<td style="text-align:center">八进制字符 (ddd)</td>
</tr>
<tr>
<td style="text-align:center"><code>\uxxxx</code></td>
<td style="text-align:center">16进制Unicode字符 (xxxx)</td>
</tr>
</tbody>
</table>
</div>
<h3 id="包装类与自动拆装箱"><a href="#包装类与自动拆装箱" class="headerlink" title="包装类与自动拆装箱"></a>包装类与自动拆装箱</h3><p>八大数据类型都有其对应的包装类，参见类型一览表，包装类可以直接对其赋值（自动装箱），包装类可以直接参与运算（自动拆箱），包装类具有非常多的静态和普通方法，这扩展了基本类型的功能，这在平时的编码中会有很多的运用。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
        <tag>数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的修炼之路「一」发行版的选择</title>
    <url>/posts/55627.html</url>
    <content><![CDATA[<p>从安装到使用Ubuntu已经有一段时间了，期间遇到了很多的坑，大多数的问题我都在互联网上找到了相应的解决方式，现在我将折腾过程简单记录下来。</p>
<span id="more"></span>
<h3 id="折腾的开始"><a href="#折腾的开始" class="headerlink" title="折腾的开始"></a>折腾的开始</h3><p>之前在Windows10中装了个Vmware，跑了个Ubuntu在上面，但是在虚拟机中使用总觉得很不爽，于是痛下决心，准备分一块空间出来装个双系统，平时工作开发的时候就用Linux，回家娱乐就用Windows。</p>
<h3 id="系统的选择"><a href="#系统的选择" class="headerlink" title="系统的选择"></a>系统的选择</h3><p>深知从Windows切换到Linux就是开启了无尽的折腾模式，同时又被Linux下各种强大的工具所吸引，我选择了入坑，但是为了让折腾起来不这么抓狂这么累，我还是在知乎上了解了很多关于各种Linux发行版的区别，操作及折腾的难度，主要包括各大主流发行版的桌面版，如：Ubuntu、Deepin、CentOS、Manjaro等，还有各种桌面环境，如：Unity、Xfce、KDE、Gnome等。</p>
<p>我犯了很多初学者同样的错误，在各个发行版中挣扎，想通过对比选出最好最优秀的系统，所以期间我下载了各大发行版，反复的刻镜像反复的装系统，乐此不疲，但始终觉得这并不是我想要的，或者因为某个坑无法解决而放弃。其实这种思维完全是错误的，没有最好的发行版，只有最适合自己的，我想要的不过是稳定，遇到问题能在网上找到答案。所以我最后选择了使用者最多也是桌面发行版最流行的Ubuntu系统，因为我相信我会遇到的坑已经有人帮我填平了。</p>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p><img src="https://i.loli.net/2020/02/19/N9f28C1RlXJidOk.jpg" alt="55627-1.jpg"></p>
<p>目前使用的是Ubuntu18.04桌面版，这是在我美化之后的效果，个人还是非常喜欢的。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的修炼之路「三」系统及软件配置</title>
    <url>/posts/59832.html</url>
    <content><![CDATA[<p>Ubuntu装好之后，折腾之路才刚刚开始，因为不是开箱即用，还需要做一定的配置，装一些软件和工具，才能用的顺手。</p>
<span id="more"></span>
<h3 id="配置软件源"><a href="#配置软件源" class="headerlink" title="配置软件源"></a>配置软件源</h3><p><em>简单介绍下Linux中的文本编辑器<code>nano</code>，<code>ctrl + o</code>是保存，<code>ctrl + x</code>是退出。</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份原软件源配置</span></span><br><span class="line">sudo <span class="built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span><br><span class="line">sudo nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>
<p>从中科大的软件源获取对应版本的配置：<a href="https://mirrors.ustc.edu.cn/repogen/">USTC MIRRORS</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br></pre></td></tr></table></figure>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><ul>
<li><p>Electron-SSR</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i $(wget https://github.com/shadowsocksrr/electron-ssr/releases/download/v0.2.7/electron-ssr-0.2.7.deb) </span><br></pre></td></tr></table></figure>
</li>
<li><p>Google Chrome</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i $(wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb) </span><br></pre></td></tr></table></figure>
</li>
<li><p>谷歌拼音</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fcitx googlepinyin</span><br></pre></td></tr></table></figure>
</li>
<li><p>电源管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install tlp</span><br><span class="line"><span class="comment"># 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
</li>
<li><p>网络工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install net-tools</span><br></pre></td></tr></table></figure>
</li>
<li><p>文本编辑器Kate</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install kate</span><br></pre></td></tr></table></figure>
</li>
<li><p>网易云音乐</p>
<p>打开网易云音乐客户端<a href="https://music.163.com/#/download">下载页面</a>，下载适用于Ubuntu的版本。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx为具体的版本号</span></span><br><span class="line">sudo dpkg -i netease-cloud-music_1.2.1_amd64_ubuntu_xxx.deb</span><br></pre></td></tr></table></figure>
</li>
<li><p>KeepassXC</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install keepassxc</span><br></pre></td></tr></table></figure>
</li>
<li><p>坚果云</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i $(wget https://www.jianguoyun.com/static/exe/installer/ubuntu/nautilus_nutstore_amd64.deb) </span><br></pre></td></tr></table></figure>
</li>
<li><p>Git</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure>
</li>
<li><p>Axel（多线程下载工具）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install axel</span><br></pre></td></tr></table></figure>
</li>
<li><p>Htop</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install htop</span><br></pre></td></tr></table></figure>
</li>
<li><p>Sublime Text</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install sublime-text</span><br></pre></td></tr></table></figure>
</li>
<li><p>NodeJS/npm/cnpm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>Curl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>
</li>
<li><p>Yakuake（快捷下拉终端）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install yakuake</span><br></pre></td></tr></table></figure>
</li>
<li><p>Zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install zsh</span><br></pre></td></tr></table></figure>
</li>
<li><p>Tldr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt instal tldr</span><br></pre></td></tr></table></figure>
</li>
<li><p>OpenJDK</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure>
</li>
<li><p>IntelliJ IDEA</p>
<p>打开IntelliJ IDEA<a href="https://www.jetbrains.com/idea/download/#section=linux">下载页面</a>，下载压缩包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx为具体的版本号</span></span><br><span class="line">tar zxvf ideaIU-xxx.tar.gz</span><br><span class="line"><span class="comment"># 进入执行文件目录</span></span><br><span class="line"><span class="built_in">cd</span> idea-IU-xxx/bin/</span><br><span class="line"><span class="comment"># 执行启动脚本</span></span><br><span class="line">./idea.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>Maven</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install maven</span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure>
</li>
<li><p>Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Deepin-Wine"><a href="#Deepin-Wine" class="headerlink" title="Deepin-Wine"></a>Deepin-Wine</h3><p>电脑上免不了要装上QQ/微信等国民应用，但是却只有WIndows/MacOS的版本，Linux没能得到适配。在Deepin团队的努力下，做了Deepin-Wine的兼容层，让这些软件可以很好的运行在Deepin系统中，后在社区大牛的开源精神下，又把Deepin-Wine移植到了Ubuntu，所以Ubuntu也可以利用Deep-Wine运行QQ/微信/迅雷等软件了。</p>
<h4 id="安装Deepin-Wine"><a href="#安装Deepin-Wine" class="headerlink" title="安装Deepin-Wine"></a>安装Deepin-Wine</h4><p>打开项目地址<a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/releases">deepin-wine-ubuntu</a>，下载最新的发行包。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx为具体的版本号</span></span><br><span class="line">tar zxvf deepin-wine-ubuntu-xxx.tar.gz</span><br><span class="line"><span class="comment"># 执行安装脚本</span></span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>
<h4 id="获取软件安装包"><a href="#获取软件安装包" class="headerlink" title="获取软件安装包"></a>获取软件安装包</h4><p>在<a href="https://mirrors.aliyun.com/deepin/pool/non-free/d/">阿里云Deepin软件源</a>想要安装的软件的安装包，然后执行安装命令即可安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># xxx为具体的安装包名</span></span><br><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="开机打开小键盘"><a href="#开机打开小键盘" class="headerlink" title="开机打开小键盘"></a>开机打开小键盘</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br><span class="line">su gdm -s /bin/bash</span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.settings-daemon.peripherals.keyboard numlock-state <span class="string">&#x27;on&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="将主目录中文名切换成英文"><a href="#将主目录中文名切换成英文" class="headerlink" title="将主目录中文名切换成英文"></a>将主目录中文名切换成英文</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=en_US</span><br><span class="line">xdg-user-dirs-gtk-update</span><br><span class="line"><span class="comment"># 弹窗提示是否将目录转换成英文，同意</span></span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN</span><br><span class="line">reboot</span><br><span class="line"><span class="comment"># 弹窗提示是否将目录转换成中文，拒绝</span></span><br></pre></td></tr></table></figure>
<h4 id="终端（tab）补全忽略大小写"><a href="#终端（tab）补全忽略大小写" class="headerlink" title="终端（tab）补全忽略大小写"></a>终端（tab）补全忽略大小写</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 家目录下执行</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;set completion-ignore-case on&#x27;</span> &gt;&gt; .inputrc</span><br></pre></td></tr></table></figure>
<h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查是否安装zsh，未安装则先安装</span></span><br><span class="line"><span class="built_in">cat</span> /etc/shells | grep zsh </span><br><span class="line"><span class="comment"># 安装oh-my-zsh</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"><span class="comment"># 修改zsh主题</span></span><br><span class="line">nano ~/.zshrc</span><br><span class="line"><span class="comment"># 修改这个位置的主题名即可，默认主题是robbyrussell</span></span><br><span class="line"><span class="comment"># ZSH_THEME=&quot;robbyrussell&quot;</span></span><br><span class="line"><span class="comment"># random是随机主题，推荐几套个人比较喜欢的主题：strug/ys/steeef/rkj-repos</span></span><br></pre></td></tr></table></figure>
<h4 id="git代理"><a href="#git代理" class="headerlink" title="git代理"></a>git代理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 访问github奇慢无比，所以根据需要加上代理</span></span><br><span class="line"><span class="comment"># 具体的代理端口号根据代理软件设置</span></span><br><span class="line">git config --global http.https://github.com.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<h4 id="sudo免密"><a href="#sudo免密" class="headerlink" title="sudo免密"></a>sudo免密</h4><p>修改<code>/etc/sudoers</code>文件，修改<code>%sudo</code>这一行，这样所有的sudo命令都可以免密使用。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%sudo  ALL=(ALL:ALL) NOPASSWD: ALL</span><br></pre></td></tr></table></figure>
<h4 id="安装中文字符集"><a href="#安装中文字符集" class="headerlink" title="安装中文字符集"></a>安装中文字符集</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install language-pack-zh-hans</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_ALL=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
<h4 id="设置静态IP"><a href="#设置静态IP" class="headerlink" title="设置静态IP"></a>设置静态IP</h4><p>编辑位于<code>/etc/netplan/</code>目录下的<code>yml</code>文件，绑定网络配置，然后应用即可。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens32:</span></span><br><span class="line">      <span class="attr">addresses:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.123</span><span class="string">/24</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">119.29</span><span class="number">.29</span><span class="number">.29</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用网络配置</span></span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>
<h4 id="禁用IPv6"><a href="#禁用IPv6" class="headerlink" title="禁用IPv6"></a>禁用IPv6</h4><p>编辑<code>/etc/sysctl.conf</code>文件，在文件末尾添加配置，然后应用即可。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">net.ipv6.conf.all.disable_ipv6</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">net.ipv6.conf.default.disable_ipv6</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">net.ipv6.conf.lo.disable_ipv6</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 应用配置</span></span><br><span class="line">sudo sysctl -p</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的修炼之路「二」Ubuntu的安装</title>
    <url>/posts/21868.html</url>
    <content><![CDATA[<p>发行版已经确定，接下来就是系统的安装工作，因为是准备安装Windows和Ubuntu双系统，所以很多操作可以先在Windows下完成，比如修改分区，制作启动盘等。</p>
<span id="more"></span>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><ol>
<li><p>下载系统镜像</p>
<p>打开Ubuntu官网下载地址：<a href="https://ubuntu.com/download/desktop">Download Ubuntu Desktop</a>，下载最新的桌面发行版镜像文件；</p>
</li>
<li><p>下载启动盘制作软件</p>
<p>打开Rufus官网：<a href="https://rufus.ie/">Rufus</a>，下载最新版本的软件；</p>
</li>
<li><p>制作启动盘</p>
</li>
</ol>
<p>   准备一个容量大于4G的U盘，插入电脑，打开Rufus，在设备处会显示插入的U盘，然后点击选择，打开下载的Ubuntu镜像文件，分区类型建议设置为GPT，其他设置默认，然后单击开始，弹窗选择写入模式，默认即可，提示<strong>会清除U盘所有数据，如有重要数据请先备份</strong>，进度条跑完即制作完成。</p>
<p>   <img src="https://i.loli.net/2020/02/19/IGXdjB8ROKLl2uC.jpg" alt="21868-1.jpg"></p>
<h3 id="准备分区"><a href="#准备分区" class="headerlink" title="准备分区"></a>准备分区</h3><p>在Windows10下右键开始，选择磁盘管理，打开磁盘管理工具。</p>
<p><img src="https://i.loli.net/2020/02/19/28OUnSPe9BdDuwz.jpg" alt="21868-2.jpg"></p>
<p>这里我准备将F盘分50G出来用作安装Ubuntu，右键想分区的盘，选择压缩卷，输入分割的大小（注意单位是MB），点击压缩即可，即会多出一个大小为50G的未分配区块。</p>
<p><img src="https://i.loli.net/2020/02/19/p4qbB8JVX6jG9vr.jpg" alt="21868-3.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/Evd2kuWAUFyHfrh.jpg" alt="21868-4.jpg"></p>
<h3 id="通过启动盘启动"><a href="#通过启动盘启动" class="headerlink" title="通过启动盘启动"></a>通过启动盘启动</h3><p>把制作好的启动盘插入电脑，进入电脑的BIOS系统修改电脑的启动顺序，将启动盘设置成第一启动，以我的电脑（暗影精灵4）为例，开机按F9即可切换启动扇区，不同的品牌的电脑有不同的设置方法，详情可以通过搜索引擎查询自己的电脑型号查看具体的设置操作。</p>
<p><img src="https://i.loli.net/2020/02/19/HTtdDhGnK21wlrz.jpg" alt="21868-5.jpg"></p>
<p>启动成功之后会有四个选项，第一个选项是试用Ubuntu，第二个选项是安装Ubuntu，剩下两个不用关注。</p>
<p><img src="https://i.loli.net/2020/02/19/gdloXGZJ8C5yOwT.jpg" alt="21868-6.jpg"></p>
<p>这里我选择第一个试用Ubuntu，为了方便截图，当然直接安装也是可以的，稍等片刻后即进入Ubuntu的试用界面。</p>
<p><img src="https://i.loli.net/2020/02/19/Ce85q6YGsL9gXpo.jpg" alt="21868-7.jpg"></p>
<p>进入Ubuntu的试用桌面基本表示启动盘引导启动成功了。</p>
<h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h3><ol>
<li><p>双击桌面上的<code>Install Ubuntu 18.04.3 LTS</code>图标就可以开始安装系统；</p>
</li>
<li><p>选择语言，中文（简体），或者自己想要的语言；</p>
<p><img src="https://i.loli.net/2020/02/19/Ec4OLnYaXiusqST.jpg" alt="21868-8.jpg"></p>
</li>
<li><p>选择键盘布局，默认就可以了；</p>
<p><img src="https://i.loli.net/2020/02/19/ubyG7Yjzx3J1QSs.jpg" alt="21868-9.jpg"></p>
</li>
<li><p>设置网络连接，这里不建议在安装的时候连接网络，如果网速慢的话将会影响安装速度，如果是有线网络的话建议先把网线拔掉；</p>
<p><img src="https://i.loli.net/2020/02/19/C35UzNx7LSnmJf9.jpg" alt="21868-10.jpg"></p>
</li>
<li><p>选择安装的内容，使用最小安装就好了，没必要装那些多余的软件，以后需要用到再去安装；</p>
<p><img src="https://i.loli.net/2020/02/19/dsmS6iucLlAT4Cj.jpg" alt="21868-11.jpg"></p>
</li>
<li><p>选择安装方式，因为电脑已经安装了Windows10系统，如果要图简单的话，选择第一项，与Windows共存就好了，我喜欢自己调整分区，所以我使用的其他选项，<strong>千万不要选择清除整个磁盘并安装Ubuntu</strong>，那样会丢失所有硬盘里的数据；</p>
<p><img src="https://i.loli.net/2020/02/19/JnFp1k5VYeyWd7G.jpg" alt="21868-12.jpg"></p>
</li>
<li><p>硬盘的分区结构和大小预览，可以看到有一个大小50G左右空闲分区，这是在Windows下面预留出来的，这里我将它扩展成两个分区，一个4G大小的交换分区，用于Ubuntu系统休眠使用，剩下的分为一个EXT4主分区，挂在到<code>/</code>根目录下，关于分区，实在没有必要过于纠结挂载点，建议都挂载到根目录，<strong>千万不要去修改其他非空闲的分区，格式化分区会丢失数据</strong>，分区完成点击现在安装；</p>
<p><img src="https://i.loli.net/2020/02/19/lGg1EKCzrn8fx6w.jpg" alt="21868-13.jpg"><br><em>分区方式：单击选择要修改的分区，点击左下角的“+”，然后设置分区大小和分区格式，点击确定即可。</em><br><img src="https://i.loli.net/2020/02/19/o2mrUuzHxkRMhas.jpg" alt="21868-14.jpg"></p>
</li>
<li><p>选择时区，中国的话默认选择上海就可以了；</p>
<p><img src="https://i.loli.net/2020/02/19/7puSkBtUgIzrWKd.jpg" alt="21868-15.jpg"></p>
</li>
<li><p>设置电脑信息和用户信息，自行设置；</p>
<p><img src="https://i.loli.net/2020/02/19/xgvZq7MmWhIH4Pe.jpg" alt="21868-16.jpg"></p>
</li>
<li><p>开始安装系统，等待几分钟即可安装成功；</p>
<p><img src="https://i.loli.net/2020/02/19/RdurE4XosJM5Pjz.jpg" alt="21868-17.jpg"></p>
</li>
<li><p>安装成功，重启电脑；</p>
<p><img src="https://i.loli.net/2020/02/19/MiwZEF8hyICTQJp.jpg" alt="21868-18.jpg"></p>
</li>
<li><p>重启电脑时将U盘拔下，通常重启电脑之后，BIOS会默认启动Ubuntu的引导界面，如果没有启动到Ubuntu的引导界面，可以自行更改BIOS的启动设置，将Ubuntu设置成第一引导选项。引导界面有四个选项，第一个是正常启动Ubuntu系统，第二个是高级启动，第三个是启动Windows系统，第四个是进入电脑的BIOS设置。界面有10秒倒计时，如果没有更改启动选项则默认启动第一个，通过上下方向键可以更改启动选项，按回车键确定，通常默认启动第一个（正常启动Ubuntu）即可；</p>
<p><img src="https://i.loli.net/2020/02/19/frlS4wkbWdpZE1q.jpg" alt="21868-19.jpg"></p>
</li>
<li><p>稍等片刻就进入Ubuntu登录界面，选择安装系统时创建的用户，输入密码即可进入系统；</p>
<p><img src="https://i.loli.net/2020/02/19/UVoPRxA6iuk4f2a.jpg" alt="21868-20.jpg"></p>
</li>
<li><p>进入Ubuntu桌面，系统安装成功！</p>
<p><img src="https://i.loli.net/2020/02/19/1Olj8xsBP6zUiNp.jpg" alt="21868-21.jpg"></p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>相对来说，Ubuntu桌面版的安装还是非常简单的，全程都是基于可视化操作，非常便捷，稍微仔细点，配合搜索引擎应该都可以安装成功。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux的修炼之路「四」常用命令</title>
    <url>/posts/64236.html</url>
    <content><![CDATA[<p>Linux是基于命令行的世界，想要熟练的使用，掌握和了解一些常用的命令是必不可少的，我简单记录下平时用到的一些命令或功能，方便拾遗，加强记忆。</p>
<span id="more"></span>
<p>这里推荐一个网站和一个工具，对不了解的命令可以很快的找到它的快捷用法，相对于man文档来说要方便的多。</p>
<ul>
<li><a href="https://wangchujiang.com/linux-command/">Linux-Command</a>（可以很快捷的查询命令的用法，就不多做介绍了）</li>
<li><a href="https://github.com/tldr-pages/tldr">tldr</a><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Ubuntu安装tldr</span></span><br><span class="line">sudo apt install tldr</span><br><span class="line"><span class="comment"># 其他系统安装tldr</span></span><br><span class="line">sudo npm install -g tldr</span><br><span class="line"><span class="comment"># 使用tldr xxx，xxx为具体要查询的命令</span></span><br><span class="line">tldr tar</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>以每次一屏的方式输出文本的内容。<br>快捷键：<br>    向下翻页：<code>Space</code><br>    向上翻页：<code>b</code><br>    退出：<code>q</code><br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-&lt;数字&gt; <span class="comment"># 每一屏的行数</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以每屏10行的方式查看文件家目录下的a.txt</span></span><br><span class="line">more -10 ~/a.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h4><p>以管理员权限执行，配置位于<code>/etc/sudoers</code>，输入密码后有五分钟有效期。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检查软件源更新</span></span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></p>
<h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>用于切换当前用户身份到其他用户身份，需要输入切换用户的密码。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换到root用户</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure></p>
<h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>进入某目录，<code>/</code>表示根目录，<code>~</code>表示当前用户的家目录，<code>.</code>表示当前所在目录，<code>..</code>表示上级目录。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入家目录</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure></p>
<h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>列出目录下的文件，默认为当前文件夹，文件名以<code>.</code>开头的被视为隐藏文件（夹）。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a <span class="comment"># 列出所有文件</span></span><br><span class="line">-l <span class="comment"># 单列输出</span></span><br><span class="line">-h <span class="comment"># 转换成可读大小，文件大小默认是字节</span></span><br><span class="line">-R <span class="comment"># 递归子目录</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以单列输出列出家目录下的所有文件</span></span><br><span class="line"><span class="built_in">ls</span> -alh ~ </span><br></pre></td></tr></table></figure></p>
<h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>新建文件夹。<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在家目录下创建文件夹test</span></span><br><span class="line"><span class="built_in">mkdir</span> ~/test</span><br></pre></td></tr></table></figure>
<h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>复制文件（夹），将源文件（夹）复制到目标位置。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f <span class="comment"># 强制复制，存在即覆盖</span></span><br><span class="line">-R <span class="comment"># 递归复制子文件夹</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将家目录下的.bashrc文件复制到家目录下的test文件夹中</span></span><br><span class="line"><span class="built_in">cp</span> ~/.bashrc ~/test/</span><br></pre></td></tr></table></figure></p>
<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>变更文件的修改时间，如果文件不存在则创建新的空白文件。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在家目录下创建空白文件test.txt</span></span><br><span class="line"><span class="built_in">touch</span> ~/test.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>将源文件（夹）移动到目标位置，或者重命名文件（夹）。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f <span class="comment"># 如果存在同名文件直接覆盖</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将a.txt重命名为b.txt</span></span><br><span class="line"><span class="built_in">mv</span> a.txt b.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h4><p>删除文件（夹）。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-r <span class="comment"># 递归删除子目录下的文件</span></span><br><span class="line">-f <span class="comment"># 强制删除文件</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除家目录下的a.txt</span></span><br><span class="line"><span class="built_in">rm</span> ~/a.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>清除屏幕上的信息<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure></p>
<h4 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h4><p>Debian系Linux上的软件包管理工具，可以用来管理安装包，安装包后缀以<code>.deb</code>结尾，通常需要使用<code>root</code>权限执行。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i <span class="comment"># 安装软件包</span></span><br><span class="line">-r <span class="comment"># 删除软件包</span></span><br><span class="line">-P <span class="comment"># 删除软件包的同时删除其配置文件</span></span><br><span class="line">-l <span class="comment"># 显示已安装软件包列表</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装firefox</span></span><br><span class="line">sudo dpkg -i firefox.deb</span><br><span class="line"><span class="comment"># 卸载firefox</span></span><br><span class="line">sudo dpkg -r firefox</span><br><span class="line"><span class="comment"># 查找firefox安装包</span></span><br><span class="line">sudo dpkg -l | grep firefox</span><br></pre></td></tr></table></figure></p>
<h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h4><p>为命令设置别名，仅限当前会话（session）有效。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为ls设置别名l</span></span><br><span class="line"><span class="built_in">alias</span> l=<span class="string">&#x27;ls&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p>文本检索工具，查找满足表达式的所有行并打印到终端。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n <span class="comment"># 显示行号</span></span><br><span class="line">-i <span class="comment"># 忽略大小写</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找test.txt中包含字符test的所有行并列出行号</span></span><br><span class="line">grep -n <span class="string">&#x27;test&#x27;</span> test.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="nano"><a href="#nano" class="headerlink" title="nano"></a>nano</h4><p>终端文本编辑器，比vim使用起来简单一些。<br>快捷键：<br>    搜索：<code>ctrl + w</code><br>    保存：<code>ctrl + o</code><br>    退出：<code>ctrl + x</code><br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑家目录下的test.txt</span></span><br><span class="line">nano ~/test.txt</span><br></pre></td></tr></table></figure>
<h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>输出指定的字符串或者变量，变量以<code>$</code>开头引用<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e <span class="comment"># 激活转义字符，如\n表示换行</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出当前的PATH环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"><span class="comment"># 打印Hello World</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Hello World&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="export"><a href="#export" class="headerlink" title="export"></a>export</h4><p>将SHELL变量导出到运行环境，在配置环境变量中尤为重要，多个环境变量的分隔符为<code>:</code>，引用其他环境变量使用<code>$</code>符号，通过终端设置的环境变量只对当前会话生效。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前运行环境的所有环境变量</span></span><br><span class="line"><span class="built_in">export</span></span><br><span class="line"><span class="comment"># 将/opt/jdk/bin添加到PATH变量中</span></span><br><span class="line"><span class="built_in">export</span> PATH=/opt/jdk/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></p>
<h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>显示当前所在的工作目录。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前所在的工作目录。</span></span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></p>
<h4 id="exit"><a href="#exit" class="headerlink" title="exit"></a>exit</h4><p>退出当前的SHELL客户端。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出当前的SHELL客户端</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p>
<h4 id="bg"><a href="#bg" class="headerlink" title="bg"></a>bg</h4><p>把当前执行的应用程序移动到后台执行，类似于在命令之后加<code>&amp;</code>。<br>SHELL快捷键（在终端中通常以<code>^</code>符号指代<code>ctrl</code>）：<br>​    中断程序：<code>ctrl + c</code><br>​    挂起程序并暂停执行：<code>ctrl + z</code><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端睡眠60秒钟</span></span><br><span class="line"><span class="built_in">sleep</span> 60</span><br><span class="line"><span class="comment"># 使用快捷键^ + z挂起当前进程</span></span><br><span class="line"><span class="comment"># 将当前挂起的进程移至到后台运行</span></span><br><span class="line"><span class="built_in">bg</span></span><br></pre></td></tr></table></figure></p>
<h4 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h4><p>列出当前会话作业的状态。<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前会话作业的状态。</span></span><br><span class="line"><span class="built_in">jobs</span></span><br></pre></td></tr></table></figure>
<h4 id="fg"><a href="#fg" class="headerlink" title="fg"></a>fg</h4><p>将后台运行的进程切换到前台运行。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%n <span class="comment"># n表示作业编号</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将编号为1的作业切换到前台运行</span></span><br><span class="line"><span class="built_in">fg</span> %1</span><br></pre></td></tr></table></figure></p>
<h4 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h4><p>发送信号到指定的进程。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-l <span class="comment"># 列出所有信号量</span></span><br><span class="line">-n <span class="comment"># 指定发送的信号量</span></span><br><span class="line">PID <span class="comment"># 指定进程号（一个或多个）</span></span><br><span class="line">%n <span class="comment"># 指定作业号（一个或多个）</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制中止进程号为1的进程</span></span><br><span class="line"><span class="built_in">kill</span> -n 9 1</span><br><span class="line"><span class="comment"># 强制中止进程号为1的进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 1</span><br><span class="line"><span class="comment"># 默认向进程号为1的进程发送终止信号</span></span><br><span class="line"><span class="built_in">kill</span> 1</span><br></pre></td></tr></table></figure></p>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>在指定目录下查找满足条件的文件。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-name <span class="comment"># 指定查找文件名（可以使用通配符）</span></span><br><span class="line">-iname <span class="comment"># 指定查找文件名，忽略大小写</span></span><br><span class="line">-regex <span class="comment"># 使用正则表达式匹配文件路径</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出当前目录及子目录下的所有文件</span></span><br><span class="line">find .</span><br><span class="line"><span class="comment"># 在家目录下查找文件名为test的文件</span></span><br><span class="line">find ~ -name <span class="string">&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>对指定的文件进行上下分页输出。<br>快捷键：<br>​    向上翻页：<code>PageUp</code><br>​    向下翻页：<code>PageDown</code><br>​    退出：<code>q</code><br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-e <span class="comment"># 文件内容显示完毕后，自动退出</span></span><br><span class="line">-N <span class="comment"># 行首显示行号</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上下分页输出文件家目录下的a.txt</span></span><br><span class="line">less -N ~/a.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>统计文件的字节数，字数，行数。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c <span class="comment"># 统计字节数</span></span><br><span class="line">-w <span class="comment"># 统计字符数</span></span><br><span class="line">-l <span class="comment"># 统计行数</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计a.txt的行数</span></span><br><span class="line"><span class="built_in">wc</span> -l a.txt</span><br><span class="line"><span class="comment"># 统计当前目录下文件的总行数</span></span><br><span class="line"><span class="built_in">wc</span> -l *</span><br></pre></td></tr></table></figure></p>
<h4 id="env-printenv"><a href="#env-printenv" class="headerlink" title="env/printenv"></a>env/printenv</h4><p>查看全局环境变量。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看全局环境变量</span></span><br><span class="line"><span class="built_in">printenv</span></span><br><span class="line"><span class="comment"># 查看HOME环境变量(查看单个环境变量时，只能使用printenv)</span></span><br><span class="line"><span class="built_in">printenv</span> HOME</span><br></pre></td></tr></table></figure></p>
<h4 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h4><p>打印当前系统相关信息。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a <span class="comment"># 显示所有信息</span></span><br><span class="line">-v <span class="comment"># 显示操作系统版本</span></span><br><span class="line">-s <span class="comment"># 显示操作系统名称</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示系统所有信息</span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure></p>
<h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>显示各种网络相关信息，如网络连接，路由表，接口状态 ，多播成员等 。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a <span class="comment"># 显示所有选项，默认不显示LISTEN相关</span></span><br><span class="line">-t <span class="comment"># 显示tcp相关选项</span></span><br><span class="line">-u <span class="comment"># 显示udp相关选项</span></span><br><span class="line">-n <span class="comment"># 直接使用ip地址，而不通过域名服务器</span></span><br><span class="line">-p <span class="comment"># 显示正在使用Socket的程序识别码和程序名称；</span></span><br><span class="line">-l <span class="comment"># 列出所有处于监听状态的 Sockets</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有端口</span></span><br><span class="line">netstat -a | more</span><br><span class="line"><span class="comment"># 列出所有监听的tcp端口</span></span><br><span class="line">netstat -lt</span><br></pre></td></tr></table></figure></p>
<h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>查看Linux中的指令帮助、配置文件帮助和编程帮助等信息。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a <span class="comment"># 在所有的man帮助手册中搜索</span></span><br><span class="line">-f <span class="comment"># 等价于whatis指令，显示给定关键字的简短描述信息</span></span><br><span class="line">-P <span class="comment"># 指定内容时使用分页程序</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询ipconfig相关信息</span></span><br><span class="line">man ipconfig</span><br></pre></td></tr></table></figure></p>
<h4 id="which"><a href="#which" class="headerlink" title="which"></a>which</h4><p>查找文件，在环境变量$PATH设置的目录里查找符合条件的文件。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指令&quot;bash&quot;的绝对路径</span></span><br><span class="line"><span class="built_in">which</span> bash</span><br></pre></td></tr></table></figure></p>
<h4 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h4><p>查找文件，只能用于查找二进制文件、源代码文件和man手册页。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看指令&quot;bash&quot;的位置</span></span><br><span class="line">whereis bash</span><br></pre></td></tr></table></figure></p>
<h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><p>显示自身用户名称。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示自身的用户名称</span></span><br><span class="line"><span class="built_in">whoami</span></span><br></pre></td></tr></table></figure></p>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>显示当前进程 (process) 的状态。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-A <span class="comment"># 列出所有的进程</span></span><br><span class="line">-f <span class="comment"># 等价于whatis指令，显示给定关键字的简短描述信息</span></span><br><span class="line">-u <span class="comment"># 指定用户的所有进程</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示root进程用户信息</span></span><br><span class="line">ps -u root</span><br><span class="line"><span class="comment"># 显示所有进程信息，连同命令行</span></span><br><span class="line">ps -Af</span><br></pre></td></tr></table></figure></p>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率、CPU占用率等。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-u <span class="comment"># 指定用户名</span></span><br><span class="line">-p <span class="comment"># 指定进程</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示root进程信息</span></span><br><span class="line">top -u root</span><br></pre></td></tr></table></figure></p>
<h4 id="file"><a href="#file" class="headerlink" title="file"></a>file</h4><p>辨识文件类型。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查询文件pom.xml的类型</span></span><br><span class="line">file pom.xml</span><br></pre></td></tr></table></figure></p>
<h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>为某一个文件在另外一个位置建立一个同步的链接。当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。<br>链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-s <span class="comment"># 软链接(符号链接)</span></span><br><span class="line">-b <span class="comment"># 删除，覆盖以前建立的链接</span></span><br><span class="line">-d <span class="comment"># 允许超级用户制作目录的硬链接</span></span><br><span class="line">-n <span class="comment"># 把符号链接视为一般目录</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给文件创建软链接，为log.log文件创建软链接link，如果log.log丢失，link将失效</span></span><br><span class="line"><span class="built_in">ln</span> -s log.log <span class="built_in">link</span></span><br></pre></td></tr></table></figure></p>
<h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>显示或设定系统的日期与时间。可以设定欲显示的格式，格式设定为一个加号后接数个标记<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--<span class="built_in">help</span> <span class="comment"># 显示辅助讯息</span></span><br><span class="line">%D <span class="comment"># 直接显示日期 (mm/dd/yy)</span></span><br><span class="line">%T <span class="comment"># 直接显示时间 (24 小时制)</span></span><br><span class="line">%k <span class="comment"># 小时(0..23)</span></span><br><span class="line">%M <span class="comment"># 分钟(00..59)</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示时间</span></span><br><span class="line"><span class="built_in">date</span> <span class="string">&#x27;+%D %T&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h4><p>安装包管理工具，可以更新软件包列表索引、执行安装新软件包、升级现有软件包，还能够升级整个系统。(apt 是 Debian 系操作系统的包管理工具)<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update  <span class="comment"># 更新软件源中的所有软件列表</span></span><br><span class="line">upgrade <span class="comment"># 升级软件包</span></span><br><span class="line">install &lt;软件包名&gt; <span class="comment"># 安装指定软件。此命令需管理员权限</span></span><br><span class="line">remove  &lt;软件包名&gt; <span class="comment"># 用来卸载指定软件</span></span><br><span class="line">show    &lt;软件包名&gt; <span class="comment"># 显示软件包具体信息</span></span><br><span class="line">autoremove  <span class="comment"># 用来自动清理不再使用的依赖和库文件</span></span><br><span class="line">purge <span class="comment"># 卸载软件包并删除配置文件</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复依赖关系</span></span><br><span class="line">sudo apt install -f</span><br><span class="line"><span class="comment"># 安装git</span></span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></p>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>连接文件并打印到标准输出设备上。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n <span class="comment"># 由1开始对所有输出的行数编号</span></span><br><span class="line">-b <span class="comment"># 和 -n 相似，只不过对于空白行不编号</span></span><br><span class="line">-s <span class="comment"># 当遇到有连续两行以上的空白行，就代换为一行的空白行</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 给log.txt加上行号后输出</span></span><br><span class="line"><span class="built_in">cat</span> -n log.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>用来打包，压缩和解压文件。tar本身不具有压缩功能，它是调用压缩功能实现的 。<br>打包和压缩：打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-z <span class="comment"># 支持gzip解压文件</span></span><br><span class="line">-j <span class="comment"># 支持bzip2解压文件</span></span><br><span class="line">-c <span class="comment"># 建立新的压缩文件</span></span><br><span class="line">-x <span class="comment"># 从压缩的文件中提取文件</span></span><br><span class="line">-f <span class="comment"># 指定压缩文件</span></span><br><span class="line">-v <span class="comment"># 显示操作过程</span></span><br><span class="line">-t <span class="comment"># 显示压缩文件的内容</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将log.txt打包为log.tar</span></span><br><span class="line">tar -cvf log.tar log.txt</span><br><span class="line"><span class="comment"># 将log.tar解包</span></span><br><span class="line">tar -xvf log.tar</span><br><span class="line"><span class="comment"># 查看log.tar.gz内容</span></span><br><span class="line">tar -ztvf log.tar.gz</span><br></pre></td></tr></table></figure></p>
<h4 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h4><p>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。<br>参数说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-u <span class="comment"># 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是</span></span><br><span class="line">+ <span class="comment"># 表示增加权限</span></span><br><span class="line">- <span class="comment"># 表示取消权限</span></span><br><span class="line">= <span class="comment"># 表示唯一设定权限</span></span><br><span class="line">-r <span class="comment"># 表示可读取</span></span><br><span class="line">-w <span class="comment"># 表示可写入</span></span><br><span class="line">-x <span class="comment"># 表示可执行</span></span><br><span class="line">-X <span class="comment"># 表示只有当该文件是个子目录或者该文件已经被设定过为可执行</span></span><br></pre></td></tr></table></figure>
<p>补充：<br>chmod也可以用数字来表示权限如 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 file</span><br></pre></td></tr></table></figure>
<p>分别表示User、Group、及Other的权限。r=4，w=2，x=1</p>
<ul>
<li>若要rwx属性则4+2+1=7；</li>
<li>若要rw-属性则4+2=6；</li>
<li>若要r-x属性则4+1=5。</li>
</ul>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件file1.txt设为所有人皆可读取</span></span><br><span class="line"><span class="built_in">chmod</span> ugo+r file1.txt</span><br><span class="line"><span class="comment"># 将当前目录下的所有文件与子目录皆设为任何人可读取 </span></span><br><span class="line"><span class="built_in">chmod</span> -R a+r *</span><br></pre></td></tr></table></figure></p>
<h4 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h4><p>将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件file1.txt的拥有者设为friend，群体的使用者friendGroup</span></span><br><span class="line"><span class="built_in">chown</span> friend:friendGroup file1.txt</span><br></pre></td></tr></table></figure></p>
<h4 id="df"><a href="#df" class="headerlink" title="df"></a>df</h4><p>显示目前在Linux系统上的文件系统的磁盘使用情况统计。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-h <span class="comment"># 使用人类可读的格式</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure></p>
<h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>在终端上输出文件末尾的若干行内容，查看正在执行程序的日志输出很方便。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-n <span class="comment"># 指定显示文件末尾的行数</span></span><br><span class="line">-f <span class="comment"># 动态监听文件末尾的内容变化</span></span><br><span class="line">-s <span class="comment"># 动态监听的秒数，和-f配合使用</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看mail.log的最后20行内容并执行动态监听</span></span><br><span class="line"><span class="built_in">tail</span> -n 20 -f mail.log </span><br></pre></td></tr></table></figure></p>
<h4 id="logout"><a href="#logout" class="headerlink" title="logout"></a>logout</h4><p>退出当前登录的SHELL。<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 退出当前登录的SHELL</span></span><br><span class="line"><span class="built_in">logout</span></span><br></pre></td></tr></table></figure>
<h4 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h4><p>列出当前系统打开的文件列表，使用这个命令需要使用<code>root</code>权限。在Linux中，一切皆文件，如：进程、端口等，都被分配了文件标识符，可以通过<code>lsof</code>查看它们。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i :port <span class="comment"># 查看打开指定端口的进程 </span></span><br><span class="line">-t <span class="comment"># 只查看打开进程的PID</span></span><br><span class="line">-u <span class="comment"># 查看指定用户打开的文件</span></span><br><span class="line">-c <span class="comment"># 查看指定命令打开的文件</span></span><br><span class="line">-p <span class="comment"># 查看指定进程号打开的文件</span></span><br><span class="line">-D <span class="comment"># 查看某目录下被打开的文件</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看使用8080端口的进程</span></span><br><span class="line">sudo lsof -i :8080</span><br><span class="line"><span class="comment"># 查看用户glieen打开的文件</span></span><br><span class="line">sudo lsof -u glieen</span><br><span class="line"><span class="comment"># 查看mysql打开的文件</span></span><br><span class="line">sudo lsof -c mysql</span><br><span class="line"><span class="comment"># 查看进程号为555打开的文件</span></span><br><span class="line">sudo lsof -p 555</span><br></pre></td></tr></table></figure></p>
<h4 id="mount"><a href="#mount" class="headerlink" title="mount"></a>mount</h4><p>用于挂载Linux系统之外的文件，常用来挂载U盘，引导分区（EFI）等，通常需要使用<code>root</code>权限执行。<br>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将磁盘的第一个分区/dev/sda1挂载到/mnt/glieen/f目录下</span></span><br><span class="line">sudo mount /dev/sda1 /mnt/glieen/f</span><br></pre></td></tr></table></figure>
<h4 id="umount"><a href="#umount" class="headerlink" title="umount"></a>umount</h4><p>用于卸载已经挂载的文件系统。<br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载磁盘的第一个分区/dev/sda1</span></span><br><span class="line">sudo umount /dev/sda1</span><br></pre></td></tr></table></figure></p>
<h4 id="sftp"><a href="#sftp" class="headerlink" title="sftp"></a>sftp</h4><p>交互式的FTP文件传输程序，默认使用ssh协议连接，可以方便的上传和下载文件。<br>交互式命令：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以远程执行程序命令，本地命令需要在命令前加l，表示local</span></span><br><span class="line">put <span class="comment"># 上传文件</span></span><br><span class="line">get <span class="comment"># 下载文件</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以用户glieen的身份登录主机192.168.1.3的sftp交互客户端，需要输入用户glieen的密码</span></span><br><span class="line">sftp glieen@192.168.1.3</span><br><span class="line"><span class="comment"># 获取mail.log文件并重命名为a.txt</span></span><br><span class="line">&gt; get mail.log a.txt</span><br><span class="line"><span class="comment"># 上传test.txt文件</span></span><br><span class="line">&gt; put test.txt</span><br><span class="line"><span class="comment"># 退出sftp交互程序</span></span><br><span class="line">&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure></p>
<h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>修改用户密码的工具，用户信息存放在<code>/etc/passwd</code>中。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-S <span class="comment"># 查看当前登录用户的密码状态</span></span><br><span class="line">-d <span class="comment"># 清除密码</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改当前登录用户的密码为1234</span></span><br><span class="line">passwd 1234</span><br><span class="line"><span class="comment"># 修改用户glieen的密码为1234</span></span><br><span class="line">passwd glieen 1234</span><br><span class="line"><span class="comment"># 清除用户glieen的密码</span></span><br><span class="line">passwd -d glieen</span><br></pre></td></tr></table></figure></p>
<h4 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h4><p>测试主机网络连通性的工具。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-c <span class="comment"># 指定测试连接的次数</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送10次测试连接到主机8.8.8.8</span></span><br><span class="line">ping -n 10 8.8.8.8</span><br></pre></td></tr></table></figure></p>
<h4 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h4><p>关闭当前的Linux系统。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f <span class="comment"># 强制关机</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制关机</span></span><br><span class="line">sudo poweroff -f</span><br></pre></td></tr></table></figure></p>
<h4 id="shutdown"><a href="#shutdown" class="headerlink" title="shutdown"></a>shutdown</h4><p>执行Linux系统的关机命令。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-t <span class="comment"># 设定关机之前的延迟时间，单位为秒</span></span><br><span class="line">-f <span class="comment"># 强制关机</span></span><br><span class="line">-r <span class="comment"># 关机之后重启系统</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 立即关机</span></span><br><span class="line">shutdown -t now</span><br><span class="line"><span class="comment"># 一分钟之后关机</span></span><br><span class="line">shutdown -t 60</span><br><span class="line"><span class="comment"># 重启Linux操作系统，等价于reboot</span></span><br><span class="line">shutdown -r</span><br></pre></td></tr></table></figure></p>
<h4 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h4><p>重启Linux系统。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-f <span class="comment"># 强制重启</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制重启Linux操作系统</span></span><br><span class="line">reboot -f</span><br></pre></td></tr></table></figure></p>
<h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h4><p>在远程主机和本机之间进行文件复制，将源文件复制到目标位置。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-r <span class="comment"># 递归复制子文件夹下的文件</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将主机192.168.1.3上glieen用户家目录下的文件夹test复制到当前目录，需要输入glieen用户的密码</span></span><br><span class="line">scp -r glieen@192.168.1.3:~/test/ .</span><br></pre></td></tr></table></figure></p>
<h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><p>SHELL客户端远程连接工具，可以远程登录Linux主机。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-p <span class="comment"># 指定端口号</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用端口2333以用户glieen登录远程主机192.168.1.3，需要输入glieen用户的密码</span></span><br><span class="line">ssh glieen@192.168.1.3 -p 2333</span><br></pre></td></tr></table></figure></p>
<h4 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h4><p>用于解压缩zip命令压缩的压缩文件。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-v <span class="comment"># 执行时显示详细信息</span></span><br><span class="line">-o <span class="comment"># 覆盖已有文件</span></span><br><span class="line">-d <span class="comment"># 指定解压缩后的存放目录</span></span><br><span class="line">-P <span class="comment"># 解压缩密码</span></span><br><span class="line">-l <span class="comment"># 查看压缩包内的文件内容而不解压缩</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩test.zip压缩包到家目录下</span></span><br><span class="line">unzip -v test.zip -d ~</span><br><span class="line"><span class="comment"># 查看test.zip压缩包内的文件</span></span><br><span class="line">unzip -l test.zip</span><br></pre></td></tr></table></figure></p>
<h4 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h4><p>配置和查看Linux系统中的网络配置。<br>常用参数：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-a <span class="comment"># 查看所有已配置的网络接口</span></span><br></pre></td></tr></table></figure><br>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有已配置的网络接口</span></span><br><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure></p>
<h4 id="fdisk"><a href="#fdisk" class="headerlink" title="fdisk"></a>fdisk</h4><p>查看磁盘的使用情况和磁盘分区。<br>常用参数：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-l <span class="comment"># 查看所有磁盘及分区情况</span></span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看所有磁盘及分区情况</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 对磁盘/dev/sda进行交互式分区操作</span></span><br><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL分组TopN查询</title>
    <url>/posts/12049.html</url>
    <content><![CDATA[<p>在MySQL8.0中新增了窗口函数的新特性，可以很容易的就实现分组的TopN的查询问题，但是在更低的版本中，需要使用稍微复杂一点的查询语句才能实现同样的效果。</p>
<span id="more"></span>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>数据库版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  VERSION();</span><br><span class="line">+-----------+</span><br><span class="line">| VERSION() |</span><br><span class="line">+-----------+</span><br><span class="line">| 5.7.22    |</span><br><span class="line">+-----------+</span><br></pre></td></tr></table></figure>
<p>表结构，创建一个学生成绩表，包含学生姓名，学科名和学科分数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `test` (</span><br><span class="line">  `id` INT (11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` VARCHAR (20) DEFAULT NULL,</span><br><span class="line">  `course` VARCHAR (20) DEFAULT NULL,</span><br><span class="line">  `score` INT (11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>插入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO test (name, course, score)</span><br><span class="line">VALUES</span><br><span class="line">  (&#x27;张三&#x27;, &#x27;语文&#x27;, 80),</span><br><span class="line">  (&#x27;李四&#x27;, &#x27;语文&#x27;, 90),</span><br><span class="line">  (&#x27;王五&#x27;, &#x27;语文&#x27;, 93),</span><br><span class="line">  (&#x27;张三&#x27;, &#x27;数学&#x27;, 77),</span><br><span class="line">  (&#x27;李四&#x27;, &#x27;数学&#x27;, 68),</span><br><span class="line">  (&#x27;王五&#x27;, &#x27;数学&#x27;, 99),</span><br><span class="line">  (&#x27;张三&#x27;, &#x27;英语&#x27;, 90),</span><br><span class="line">  (&#x27;李四&#x27;, &#x27;英语&#x27;, 50),</span><br><span class="line">  (&#x27;王五&#x27;, &#x27;英语&#x27;, 89);</span><br></pre></td></tr></table></figure>
<p>数据内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  *</span><br><span class="line">FROM</span><br><span class="line">  test;</span><br><span class="line"></span><br><span class="line">+----+--------+--------+-------+</span><br><span class="line">| id | name   | course | score |</span><br><span class="line">+----+--------+--------+-------+</span><br><span class="line">|  1 | 张三   | 语文   |    80 |</span><br><span class="line">|  2 | 李四   | 语文   |    90 |</span><br><span class="line">|  3 | 王五   | 语文   |    93 |</span><br><span class="line">|  4 | 张三   | 数学   |    77 |</span><br><span class="line">|  5 | 李四   | 数学   |    68 |</span><br><span class="line">|  6 | 王五   | 数学   |    99 |</span><br><span class="line">|  7 | 张三   | 英语   |    90 |</span><br><span class="line">|  8 | 李四   | 英语   |    50 |</span><br><span class="line">|  9 | 王五   | 英语   |    89 |</span><br><span class="line">+----+--------+--------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="Top1"><a href="#Top1" class="headerlink" title="Top1"></a>Top1</h3><p>查询分组内的最大值（最小值），查询每门学科的最高成绩对应的学生姓名和分数。</p>
<ol>
<li>使用自联结</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.name,</span><br><span class="line">  t1.score</span><br><span class="line">FROM</span><br><span class="line">  test t1</span><br><span class="line">INNER JOIN (</span><br><span class="line">  SELECT</span><br><span class="line">    course,</span><br><span class="line">    MAX(score) AS max</span><br><span class="line">  FROM</span><br><span class="line">    test</span><br><span class="line">  GROUP BY</span><br><span class="line">    course</span><br><span class="line">) t2 ON t1.course = t2.course</span><br><span class="line">AND t1.score = t2.max;</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| course |name   | score |</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| 语文   | 王五   |    93 |</span><br><span class="line">| 数学   | 王五   |    99 |</span><br><span class="line">| 英语   | 张三   |    90 |</span><br><span class="line">+--------+--------+-------+</span><br></pre></td></tr></table></figure>
<ol>
<li>使用关联子查询</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.name,</span><br><span class="line">  t1.score</span><br><span class="line">FROM</span><br><span class="line">  test t1</span><br><span class="line">WHERE</span><br><span class="line">  t1.score = (</span><br><span class="line">    SELECT</span><br><span class="line">      MAX(score)</span><br><span class="line">    FROM</span><br><span class="line">      test t2</span><br><span class="line">    WHERE</span><br><span class="line">      t1.course = t2.course</span><br><span class="line">  );</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| course | name   | score |</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| 语文   | 王五   |    93 |</span><br><span class="line">| 数学   | 王五   |    99 |</span><br><span class="line">| 英语   | 张三   |    90 |</span><br><span class="line">+--------+--------+-------+</span><br></pre></td></tr></table></figure>
<h3 id="TopN"><a href="#TopN" class="headerlink" title="TopN"></a>TopN</h3><p>查询分组内的前（后）N个值，查询每门学科成绩最高的前两名对应的学生姓名和分数。</p>
<ol>
<li>使用自联结</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.name,</span><br><span class="line">  t1.score</span><br><span class="line">FROM</span><br><span class="line">  test t1</span><br><span class="line">LEFT JOIN test t2 ON t1.course = t2.course</span><br><span class="line">AND t1.score &lt; t2.score</span><br><span class="line">GROUP BY</span><br><span class="line">  t1.name,</span><br><span class="line">  t1.score</span><br><span class="line">HAVING</span><br><span class="line">  COUNT(t2.id) &lt; 2</span><br><span class="line">ORDER BY</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.score DESC;</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| course |name   | score |</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| 数学   | 王五   |    99 |</span><br><span class="line">| 数学   | 张三   |    77 |</span><br><span class="line">| 英语   | 张三   |    90 |</span><br><span class="line">| 英语   | 王五   |    89 |</span><br><span class="line">| 语文   | 王五   |    93 |</span><br><span class="line">| 语文   | 李四   |    90 |</span><br><span class="line">+--------+--------+-------+</span><br></pre></td></tr></table></figure>
<ol>
<li>使用关联子查询</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.name,</span><br><span class="line">  t1.score</span><br><span class="line">FROM</span><br><span class="line">  test t1</span><br><span class="line">WHERE</span><br><span class="line">  2 &gt; (</span><br><span class="line">    SELECT</span><br><span class="line">      COUNT(1)</span><br><span class="line">    FROM</span><br><span class="line">      test t2</span><br><span class="line">    WHERE</span><br><span class="line">      t1.course = t2.course</span><br><span class="line">    AND t1.score &lt; t2.score</span><br><span class="line">  )</span><br><span class="line">ORDER BY</span><br><span class="line">  t1.course,</span><br><span class="line">  t1.score DESC;</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| course | name   | score |</span><br><span class="line">+--------+--------+-------+</span><br><span class="line">| 数学   | 王五   |    99 |</span><br><span class="line">| 数学   | 张三   |    77 |</span><br><span class="line">| 英语   | 张三   |    90 |</span><br><span class="line">| 英语   | 王五   |    89 |</span><br><span class="line">| 语文   | 王五   |    93 |</span><br><span class="line">| 语文   | 李四   |    90 |</span><br><span class="line">+--------+--------+-------+</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL压缩版安装记录</title>
    <url>/posts/4936.html</url>
    <content><![CDATA[<p>作为程序员，免不了与数据库打交道，MySQL作为一款最流行的关系型数据库，更是使用的非常之多，这篇文章主要记录MySQL压缩版在Windows下的安装和简单配置过程。</p>
<span id="more"></span>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>Windows版本：Windows 10专业版</p>
<p>MySQL版本：MySQL 5.7.22 64位ZIP压缩版</p>
<h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p>我推荐前往MySQL的官方网站下载MySQL的安装包，下载地址：<a href="https://downloads.mysql.com/archives/community/">MySQL Community Server</a>，选择与自己系统对应的版本，下载安装包到本地磁盘。</p>
<p>本文使用的安装包为：mysql-5.7.22-winx64.zip</p>
<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将安装包解压到指定位置（为避免不必要的麻烦，位置路径请不要包含中文和空格字符），我这里是解压到<code>F:\Software\MySQL57</code>路径下，目录结构如下图所示。</p>
<p><img src="https://i.loli.net/2020/02/19/X7cxflL1uEY6jPH.jpg" alt="4936-1.jpg"></p>
<p>打开Windows的系统变量设置，将MySQL下的bin目录配置进系统的Path变量，注意变量之间使用分号（;）间隔，这样就省去了每次都输入完整路径的麻烦。</p>
<p><img src="https://i.loli.net/2020/02/19/pY2UbegOPK1csWj.jpg" alt="4936-2.jpg"></p>
<p>以管理员权限打开命令提示符，输入<code>mysql -V</code>，正确显示MySQL的版本号即配置成功。</p>
<p><img src="https://i.loli.net/2020/02/19/yLJH5dbwpPmBIkj.jpg" alt="4936-3.jpg"></p>
<h3 id="创建MySQL默认配置文件"><a href="#创建MySQL默认配置文件" class="headerlink" title="创建MySQL默认配置文件"></a>创建MySQL默认配置文件</h3><p>新建一个文本文件，命名为<code>my.ini</code>，将以下内容复制保存到文件中，注意<code>basedir</code>和<code>datadir</code>对应为MySQL的解压路径。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8 </span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment"># 设置3306端口</span></span><br><span class="line"><span class="attr">port</span> = <span class="string">3306 </span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">&quot;F:\Software\MySQL57&quot;</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">&quot;F:\Software\MySQL57\data&quot;</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">200</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="attr">default-storage-engine</span>=<span class="string">INNODB</span></span><br></pre></td></tr></table></figure>
<h3 id="初始化MySQL"><a href="#初始化MySQL" class="headerlink" title="初始化MySQL"></a>初始化MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld --initialize-insecure --user=mysql</code>，执行完这个命令后，MySQL会在安装目录下创建一个data文件夹，且创建好默认数据库，登录的用户名为<code>root</code>，密码为空。</p>
<p><img src="https://i.loli.net/2020/02/19/JLCa3l5WB7MDuOT.jpg" alt="4936-4.jpg"></p>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>mysqld install</code>，提示<code>Service successfully installed</code>即安装成功。</p>
<p><img src="https://i.loli.net/2020/02/19/nBXAizgTYF2qp54.jpg" alt="4936-5.jpg"></p>
<p><em>卸载MySQL的命令为：<code>mysqld remove</code></em></p>
<h3 id="启动MySQL"><a href="#启动MySQL" class="headerlink" title="启动MySQL"></a>启动MySQL</h3><p>以管理员权限打开命令提示符，执行命令：<code>net start mysql</code>，提示<code>MySQL服务已经启动成功</code>即表示MySQL已经正常启动。</p>
<p><img src="https://i.loli.net/2020/02/19/Uo6P9rbqSpf5Tmk.jpg" alt="4936-6.jpg"></p>
<h3 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h3><p>打开命令提示符，执行命令：<code>mysql -u root -p</code>，密码默认为空，直接回车即可，表示以<code>root</code>用户登录MySQL。</p>
<p><img src="https://i.loli.net/2020/02/19/VMKu49RId3HniOG.jpg" alt="4936-7.jpg"></p>
<h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a>修改用户密码</h3><p>以命令提示符登录MySQL，执行命令：<code>set password for root@localhost = password(&quot;root&quot;);</code>结尾分号不能省略，表示修改<code>root</code>用户的密码为<code>root</code>，修改之后，下次登录则需键入新的密码。</p>
<p><img src="https://i.loli.net/2020/02/19/jVdS3FTQlMt8UDz.jpg" alt="4936-8.jpg"></p>
<h3 id="修改远程访问权限"><a href="#修改远程访问权限" class="headerlink" title="修改远程访问权限"></a>修改远程访问权限</h3><p>以命令提示符登录MySQL，执行以下两个命令：<code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;password&#39;;</code>和<code>flush privileges;</code>，第一个“*”表示所有数据库，第二个“*”表示所有数据表，root表示允许远程登录的用户名，%表示任意IP，password表示远程登录使用的密码，<code>flush privileges</code>是让权限立即生效。</p>
<p><img src="https://i.loli.net/2020/02/19/QwpcgTktr9JPW5s.jpg" alt="4936-9.jpg"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>MySQL压缩版的安装及配置只是一个简单的开始，想要在开发中更好的运用MySQL，后期的学习和努力还需要更多。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot下实现AOP日志</title>
    <url>/posts/37216.html</url>
    <content><![CDATA[<p>Spring两大核心为IoC和AOP，本篇文章旨在记录下在SpringBoot下如何整合使用AOP，适用场景为Web项目中对请求做切面来记录日志。</p>
<span id="more"></span>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>本次项目使用的是SpringBoot 2.0.5，引入web和aop依赖。</p>
<h3 id="实现一个Web请求"><a href="#实现一个Web请求" class="headerlink" title="实现一个Web请求"></a>实现一个Web请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现切面和日志"><a href="#实现切面和日志" class="headerlink" title="实现切面和日志"></a>实现切面和日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.glieen.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAop</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(LogAop.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* cn.glieen.controller.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointcut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointcut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">param</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">            param.append(arg).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;Args:&quot;</span> + param.toString());</span><br><span class="line">        logger.info(<span class="string">&quot;Method:&quot;</span> + joinPoint.getSignature().toLongString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@Aspect</code>定义为切面类</p>
<p><code>@Component</code>将切面注入到Spring容器中</p>
<p><code>@Pointcut</code>定义切入点</p>
<p><code>@Before</code>前置通知，在执行目标方法之前执行切面方法</p>
<p><code>JoinPoint</code>可以获得通知的签名信息</p>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>使用Postman或者浏览器访问<code>http://localhost:8080/hello?name=Glieen</code>，的到以下运行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">INFO <span class="number">10856</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring FrameworkServlet <span class="string">&#x27;dispatcherServlet&#x27;</span></span><br><span class="line">INFO <span class="number">10856</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="string">&#x27;dispatcherServlet&#x27;</span>: initialization started</span><br><span class="line">INFO <span class="number">10856</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] o.s.web.servlet.DispatcherServlet        : FrameworkServlet <span class="string">&#x27;dispatcherServlet&#x27;</span>: initialization completed in <span class="number">7</span> ms</span><br><span class="line">INFO <span class="number">10856</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] cn.glieen.aop.LogAop                     : Args:Glieen </span><br><span class="line">INFO <span class="number">10856</span> --- [nio-<span class="number">8080</span>-exec-<span class="number">1</span>] cn.glieen.aop.LogAop                     : Method:<span class="keyword">public</span> java.lang.String cn.glieen.controller.HelloController.hello(java.lang.String)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>现在就可以使用AOP来记录方法的访问日志了。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot全局异常处理</title>
    <url>/posts/53229.html</url>
    <content><![CDATA[<p>异常是Java开发中经常会遇到的问题，异常如果不妥善的处理将会对开发带来非常大的困扰，所以在代码中我们经常能看到<code>try-catch</code>代码块手动处理异常，这对业务代码会产生干扰，而SpringBoot提供了全局的异常处理机制，简单而且优雅，本文就简要介绍一下SpringBoot全局异常处理的配置。</p>
<span id="more"></span>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>使用Maven创建一个SpringBoot项目，添加web模块的依赖即可，因为只是简单展示一下异常的处理，就不用引入过多的依赖了。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="创建控制器和启动类"><a href="#创建控制器和启动类" class="headerlink" title="创建控制器和启动类"></a>创建控制器和启动类</h3><p>简单的一个<code>Controller</code>和<code>MainApplication</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制器</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SpringBoot</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>启动<code>MainApplication</code>，打开Postman（Postman是一个非常方便的接口测试工具），访问地址<code>localhost:8080/hello?name=Glieen</code>，成功返回响应数据。</p>
<p><img src="https://i.loli.net/2020/02/19/uvlfkx25GNnFHzw.jpg" alt="53229-1.jpg"></p>
<h3 id="创建异常响应实体类"><a href="#创建异常响应实体类" class="headerlink" title="创建异常响应实体类"></a>创建异常响应实体类</h3><p>我们不能直接将异常返回到客户端，这对用户和开发者来说都不友好，也不方便对异常进行处理，这里我们创建一个异常的响应实体来封装异常信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异常响应实体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorMessage</span> &#123;</span><br><span class="line">    <span class="comment">// 提示信息</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="comment">// 请求地址</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建自定义异常和异常处理类"><a href="#创建自定义异常和异常处理类" class="headerlink" title="创建自定义异常和异常处理类"></a>创建自定义异常和异常处理类</h3><p>开发中经常遇到的是运行时异常，所以这里我们继承<code>RuntimeException</code>创建自定义的异常，具体的异常在实际运用中应该跟业务逻辑有很大的关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异常处理类只需要创建一个简单的Java类，并且加上<code>ControllerAdvice</code>注解，SpringBoot在启动时会自动扫描并配置。这里使用的<code>RestControllerAdvice</code>是组合了<code>ResponseBody</code>和<code>ControllerAdvice</code>的注解，用来返回json数据，<code>ExceptionHandler</code>注解用来捕捉程序运行时发生的异常，将其配置到方法上，当指定的异常发生时即会调用该注解下的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异常处理类</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">// 日志对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(DefaultExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 捕捉自定义异常MyException</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(MyException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ErrorMessage <span class="title function_">exception</span><span class="params">(HttpServletRequest request, Exception e)</span> &#123;</span><br><span class="line">        logger.info(<span class="string">&quot;This is my custom exception!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> exceptionHandler(request.getRequestURI(), e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ErrorMessage <span class="title function_">exceptionHandler</span><span class="params">(String url, String message)</span> &#123;</span><br><span class="line">        <span class="type">ErrorMessage</span> <span class="variable">errorMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMessage</span>();</span><br><span class="line">        errorMessage.setMessage(message);</span><br><span class="line">        errorMessage.setUrl(url);</span><br><span class="line">        <span class="keyword">return</span> errorMessage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="测试异常处理流程"><a href="#测试异常处理流程" class="headerlink" title="测试异常处理流程"></a>测试异常处理流程</h3><p>这里我们将控制器做一个简单的修改，让其主动抛出自定义异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制器类</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;MyException&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Postman再次访问该接口<code>localhost:8080/hello?name=Glieen</code>，程序将自定义的异常实体类以json形式返回，包含提示信息和请求地址，同时在控制台输出日志信息，异常被成功捕捉并处理。</p>
<p><img src="https://i.loli.net/2020/02/19/43RJy2Zsoc7DiuH.jpg" alt="53229-2.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/6bPMqIoUOefkDsF.jpg" alt="53229-3.jpg"></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>SpringBoot是如此的高效和简单，在处理全局异常亦是如此，本文只是简单的记录如何捕获程序运行时发生的异常，相信在以后的开发中会用的更加得心应手。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>SpringBoot</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10系统安装教程「UEFI+GPT」</title>
    <url>/posts/43608.html</url>
    <content><![CDATA[<p>作为一个程序员，修电脑和装系统是必须要会的(￣y▽,￣)╭ ，本文记录下UEFI+GPT安装Windows10的过程。</p>
<span id="more"></span>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>电脑一台</p>
<p>U盘一个（大小8G及以上）</p>
<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>去<a href="https://www.microsoft.com/zh-cn/software-download/windows10">微软官网</a>或者<a href="https://msdn.itellyou.cn/">MSDN</a>下载原版ISO镜像文件，以MSDN为例，打开链接，在左边导航栏【操作系统】列表中找到想要重装的系统版本，打开镜像列表，选择适合自己的镜像版本，2G以上内存推荐安装64位操作系统，复制ed2k链接，使用迅雷下载镜像文件即可，本教程使用的镜像文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件名：cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso</span><br><span class="line">SHA1：61c07b037574454b88bcac7f5a571c042304c884</span><br><span class="line">文件大小：4.89GB</span><br><span class="line">发布时间：2019-01-16</span><br><span class="line">ed2k://|file|cn_windows_10_consumer_editions_version_1809_updated_jan_2019_x64_dvd_34b4d4fb.iso|5246148608|D93F5C49291A0B7AA888537954785DC3|/</span><br></pre></td></tr></table></figure>
<h3 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h3><ol>
<li><p>下载启动盘制作工具Rufus，官网地址：<a href="https://rufus.ie/">Rufus</a></p>
</li>
<li><p>插入U盘</p>
</li>
<li><p>打开Rufus，选择设备，通常会自动选定插入的U盘，选择镜像文件，分区类型选择GPT，目标系统类型选择UFEFI，其他设置默认，如图所示：</p>
<p><img src="https://i.loli.net/2020/02/19/XDWrIKNuBlYjhSz.jpg" alt="43608-1.jpg"></p>
</li>
<li><p>点击开始，工具即开始制作启动盘，<strong>提醒：制作启动盘会清除U盘中的所有数据，请提前备份！</strong></p>
</li>
<li><p>进度条跑完后，启动盘就制作成功了！关闭Rufus，准备重装系统。</p>
</li>
</ol>
<h3 id="从启动盘启动"><a href="#从启动盘启动" class="headerlink" title="从启动盘启动"></a>从启动盘启动</h3><p>启动盘制作完毕后，不要拔出U盘，然后重启电脑，进入BIOS，各个品牌的主板（笔记本）进入BIOS的按键不一致，通常台式机是<code>Delete</code>，笔记本是<code>Esc</code>，<code>F2</code>，<code>F10</code>之类的，如果不对请查看主板（笔记本）说明书或者百度解决。</p>
<p>以下我以我手头的笔记本电脑<strong>神舟战神K650D</strong>举例，通常大多数电脑设置基本都是一致的，不会有很大的差别，具体的BIOS设置请百度自己的电脑主板或笔记本型号。</p>
<ol>
<li><p>关闭安全启动，进入BIOS，找到Secure Boot选项，将其设置为关闭；</p>
<p><img src="https://i.loli.net/2020/02/19/7f1WjhlVD9Q2mNR.jpg" alt="43608-2.jpg"></p>
</li>
<li><p>开启UEFI模式，在BIOS中找到Boot下的UEFI设置，将其设置为打开；</p>
<p><img src="https://i.loli.net/2020/02/19/1eRY6Z4LbQzVC8O.jpg" alt="43608-3.jpg"></p>
</li>
<li><p>将U盘设置为第一启动项，U盘是以UEFI开头的就对了，把它移动到第一的位置；</p>
<p><img src="https://i.loli.net/2020/02/19/VAOk2fJsgdSXwLU.jpg" alt="43608-4.jpg"></p>
</li>
<li><p>保存设置并重启电脑。</p>
</li>
</ol>
<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><ol>
<li><p>如果上面的步骤都没有问题的话，那电脑重启应该可以进入到Win PE的安装界面了，像下面这样。</p>
<p><img src="https://i.loli.net/2020/02/19/hmyFMDIzAWYdaGp.jpg" alt="43608-5.jpg"></p>
</li>
<li><p>点击下一步开始安装</p>
<p><img src="https://i.loli.net/2020/02/19/GsHqfB3pOaPAFL8.jpg" alt="43608-6.jpg"></p>
</li>
<li><p>点击现在安装，进入到激活</p>
<p><img src="https://i.loli.net/2020/02/19/XZAQTmDrjFlevnH.jpg" alt="43608-7.jpg"></p>
</li>
<li><p>这里选择我没有产品密钥，可以装完系统之后再进行激活，进入操作系统版本选择</p>
<p><img src="https://i.loli.net/2020/02/19/v4xRXJ5YOTIw73s.jpg" alt="43608-8.jpg"></p>
</li>
<li><p>这里我选择家庭版为例，然后单击下一步，进入许可条款</p>
<p><img src="https://i.loli.net/2020/02/19/zQ9Dx5fZjcYCrn4.jpg" alt="43608-9.jpg"></p>
</li>
<li><p>我接受许可条款打勾，单击下一步，进入安装选项</p>
<p><img src="https://i.loli.net/2020/02/19/LPbfHM5e8U7nFCG.jpg" alt="43608-10.jpg"></p>
</li>
<li><p>因为是安装全新的系统，所以这里选择自定义，进入安装磁盘选择</p>
<p><img src="https://i.loli.net/2020/02/19/WypMxfYKNEDbSh6.jpg" alt="43608-11.jpg"></p>
</li>
<li><p>到这里是最容易遇到问题的地方了，可能遇到所选磁盘不是GPT格式的分区，磁盘容量大小不足等等问题，只要你以上步骤都正确操作，磁盘是没有问题且大小合适的，那么接下来一系列步骤应该能解决大多数安装遇到的问题，按下键盘上的<code>Shift+F10</code>打开命令提示行</p>
<p><img src="https://i.loli.net/2020/02/19/T3Yc1PR5iEVOsId.jpg" alt="43608-12.jpg"></p>
</li>
<li><p>根据提示输入以下的代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开磁盘工具</span></span><br><span class="line">diskpart</span><br><span class="line"><span class="comment"># 列出磁盘</span></span><br><span class="line">list disk</span><br><span class="line"><span class="comment"># 选择操作的磁盘，这里X是磁盘里的编号，你需要把系统装到哪个磁盘你就输入对应磁盘的编号</span></span><br><span class="line"><span class="built_in">select</span> disk X</span><br><span class="line"><span class="comment"># 清除磁盘，这个操作会将整个磁盘的内容全部清除，如果有重要数据请一定提前备份</span></span><br><span class="line">clean</span><br><span class="line"><span class="comment"># 将磁盘装换成GPT分区格式</span></span><br><span class="line">convert gpt</span><br><span class="line"><span class="comment"># 创建EFI分区，用来存放系统的引导文件，大小256M左右差不多够了</span></span><br><span class="line">create partition efi size = <span class="number">256</span></span><br><span class="line"><span class="comment"># 创建主分区，这是第一个主分区，我喜欢把系统装在这个分区里面，大小的话通常大于50G，因为我不喜欢在C盘放过多的文件和装软件，我这里分了50G</span></span><br><span class="line">create partition primary size = <span class="number">51200</span></span><br><span class="line"><span class="comment"># 创建主分区，这里省略了大小设置，就是默认将剩下的所有容量分到这个区，我喜欢把第二个分区用作D盘，装一些软件</span></span><br><span class="line">create partition primary</span><br></pre></td></tr></table></figure>
<p>下面是具体的操作过程截图，<strong>慎重操作，注意备份数据</strong></p>
<p><img src="https://i.loli.net/2020/02/19/ofkc8iWTItPSLGN.jpg" alt="43608-13.jpg"></p>
<p>操作完成之后右上角关闭或者输入命令<code>exit</code>退出命令行</p>
</li>
<li><p>再次回到安装磁盘选择，点击刷新，就可以看到重新分区后的磁盘列表了</p>
<p><img src="https://i.loli.net/2020/02/19/WbUoC2DiYsgHm5E.jpg" alt="43608-14.jpg"></p>
</li>
<li><p>选择为系统准备的分区，如图，我会选择<code>驱动器1分区2</code>然后单击下一步，系统开始安装，即将大功告成</p>
<p><img src="https://i.loli.net/2020/02/19/5uhqzSHmgyRonaW.jpg" alt="43608-15.jpg"></p>
</li>
<li><p>等待进度条读完，然后会提示重启系统完成安装，点击重启就可以了，<strong>重启的时候记得把U盘给拔下来</strong>，系统可能会重启多次，重启完成之后会进入系统的启动设置，这些都是一些基础的设置，设置完成后就能进入系统</p>
<p><img src="https://i.loli.net/2020/02/19/nc3YTPmpCLNRwax.jpg" alt="43608-16.jpg"></p>
</li>
<li><p>开始体验全新的Windows吧！</p>
</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>javap的基本用法</title>
    <url>/posts/7273.html</url>
    <content><![CDATA[<p>有时候需要深入了解类的运行方式和流程，或者查看一个类中的属性成员，我们可以使用反编译来进行查看，JDK自带了一个反编译工具javap，可以反编译，也可以查看Java编译器生成的字节码，用于分解class文件，本文简单介绍一下javap的基本方法。</p>
<span id="more"></span>
<h3 id="javap命令参数"><a href="#javap命令参数" class="headerlink" title="javap命令参数"></a>javap命令参数</h3><p>在控制台输入<code>javap -help</code>查看javap的命令用法以及参数</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Windows\system32&gt;javap <span class="literal">-help</span></span><br><span class="line">用法: javap &lt;options&gt; &lt;classes&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  <span class="literal">-help</span>  <span class="literal">--help</span>  -?        输出此用法消息</span><br><span class="line">  <span class="literal">-version</span>                 版本信息</span><br><span class="line">  <span class="literal">-v</span>  <span class="literal">-verbose</span>             输出附加信息</span><br><span class="line">  <span class="literal">-l</span>                       输出行号和本地变量表</span><br><span class="line">  <span class="literal">-public</span>                  仅显示公共类和成员</span><br><span class="line">  <span class="literal">-protected</span>               显示受保护的/公共类和成员</span><br><span class="line">  <span class="literal">-package</span>                 显示程序包/受保护的/公共类</span><br><span class="line">                           和成员 (默认)</span><br><span class="line">  <span class="literal">-p</span>  <span class="literal">-private</span>             显示所有类和成员</span><br><span class="line">  <span class="literal">-c</span>                       对代码进行反汇编</span><br><span class="line">  <span class="literal">-s</span>                       输出内部类型签名</span><br><span class="line">  <span class="literal">-sysinfo</span>                 显示正在处理的类的</span><br><span class="line">                           系统信息 (路径, 大小, 日期, MD5 散列)</span><br><span class="line">  <span class="literal">-constants</span>               显示最终常量</span><br><span class="line">  <span class="literal">-classpath</span> &lt;path&gt;        指定查找用户类文件的位置</span><br><span class="line">  <span class="literal">-cp</span> &lt;path&gt;               指定查找用户类文件的位置</span><br><span class="line">  <span class="literal">-bootclasspath</span> &lt;path&gt;    覆盖引导类文件的位置</span><br></pre></td></tr></table></figure>
<h3 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h3><h4 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">D</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">Integer</span> <span class="variable">e</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span><span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="javap-p"><a href="#javap-p" class="headerlink" title="javap -p"></a>javap -p</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Users\Glieen\Desktop&gt; javap <span class="literal">-p</span> Test.class</span><br><span class="line">Compiled from <span class="string">&quot;Test.java&quot;</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span> &#123;</span><br><span class="line">  public int a;</span><br><span class="line">  private int b;</span><br><span class="line">  public final int c;</span><br><span class="line">  public <span class="keyword">static</span> int D;</span><br><span class="line">  public java.lang.Integer e;</span><br><span class="line">  int f;</span><br><span class="line">  protected int g;</span><br><span class="line">  public Test();</span><br><span class="line">  public void method1();</span><br><span class="line">  private void method2();</span><br><span class="line">  public int method3();</span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认执行javap只能查看到公开和包级别的成员变量，使用<code>javap -p</code>可以查看类中所有的成员变量。</p>
<h4 id="javap-v-p"><a href="#javap-v-p" class="headerlink" title="javap -v -p"></a>javap -v -p</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">C:\Users\Glieen\Desktop&gt; javap <span class="literal">-v</span> <span class="literal">-p</span> .\Test.class</span><br><span class="line">Classfile /C:/Users/Glieen/Desktop/Test.class</span><br><span class="line">  Last modified <span class="number">2019</span><span class="literal">-1-17</span>; size <span class="number">726</span> bytes</span><br><span class="line">  MD5 checksum eb60967015bd6e02e460a5bf462e8c5a</span><br><span class="line">  Compiled from <span class="string">&quot;Test.java&quot;</span></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">  <span class="title">minor</span> <span class="title">version</span>: 0</span></span><br><span class="line"><span class="class">  <span class="title">major</span> <span class="title">version</span>: 52</span></span><br><span class="line"><span class="class">  <span class="title">flags</span>: <span class="title">ACC_PUBLIC</span>, <span class="title">ACC_SUPER</span></span></span><br><span class="line"><span class="class"><span class="title">Constant</span> <span class="title">pool</span>:</span></span><br><span class="line"><span class="class">   #1 = <span class="title">Methodref</span>          #11.#34        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span>.&quot;&lt;<span class="title">init</span>&gt;&quot;:()<span class="title">V</span></span></span><br><span class="line"><span class="class">   #2 = <span class="title">Fieldref</span>           #10.#35        // <span class="title">Test</span>.<span class="title">a</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">   #3 = <span class="title">Fieldref</span>           #10.#36        // <span class="title">Test</span>.<span class="title">b</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">   #4 = <span class="title">Fieldref</span>           #10.#37        // <span class="title">Test</span>.<span class="title">c</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">   #5 = <span class="title">Methodref</span>          #38.#39        // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Integer</span>.<span class="title">valueOf</span>:(<span class="title">I</span>)<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line"><span class="class">   #6 = <span class="title">Fieldref</span>           #10.#40        // <span class="title">Test</span>.<span class="title">e</span>:<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line"><span class="class">   #7 = <span class="title">Fieldref</span>           #10.#41        // <span class="title">Test</span>.<span class="title">f</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">   #8 = <span class="title">Fieldref</span>           #10.#42        // <span class="title">Test</span>.<span class="title">g</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">   #9 = <span class="title">Fieldref</span>           #10.#43        // <span class="title">Test</span>.<span class="title">D</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #10 = <span class="title">Class</span>              #44            // <span class="title">Test</span></span></span><br><span class="line"><span class="class">  #11 = <span class="title">Class</span>              #45            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="class">  #12 = <span class="title">Utf8</span>               <span class="title">a</span></span></span><br><span class="line"><span class="class">  #13 = <span class="title">Utf8</span>               <span class="title">I</span></span></span><br><span class="line"><span class="class">  #14 = <span class="title">Utf8</span>               <span class="title">b</span></span></span><br><span class="line"><span class="class">  #15 = <span class="title">Utf8</span>               <span class="title">c</span></span></span><br><span class="line"><span class="class">  #16 = <span class="title">Utf8</span>               <span class="title">ConstantValue</span></span></span><br><span class="line"><span class="class">  #17 = <span class="title">Integer</span>            3</span></span><br><span class="line"><span class="class">  #18 = <span class="title">Utf8</span>               <span class="title">D</span></span></span><br><span class="line"><span class="class">  #19 = <span class="title">Utf8</span>               <span class="title">e</span></span></span><br><span class="line"><span class="class">  #20 = <span class="title">Utf8</span>               <span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line"><span class="class">  #21 = <span class="title">Utf8</span>               <span class="title">f</span></span></span><br><span class="line"><span class="class">  #22 = <span class="title">Utf8</span>               <span class="title">g</span></span></span><br><span class="line"><span class="class">  #23 = <span class="title">Utf8</span>               &lt;<span class="title">init</span>&gt;</span></span><br><span class="line"><span class="class">  #24 = <span class="title">Utf8</span>               ()<span class="title">V</span></span></span><br><span class="line"><span class="class">  #25 = <span class="title">Utf8</span>               <span class="title">Code</span></span></span><br><span class="line"><span class="class">  #26 = <span class="title">Utf8</span>               <span class="title">LineNumberTable</span></span></span><br><span class="line"><span class="class">  #27 = <span class="title">Utf8</span>               <span class="title">method1</span></span></span><br><span class="line"><span class="class">  #28 = <span class="title">Utf8</span>               <span class="title">method2</span></span></span><br><span class="line"><span class="class">  #29 = <span class="title">Utf8</span>               <span class="title">method3</span></span></span><br><span class="line"><span class="class">  #30 = <span class="title">Utf8</span>               ()<span class="title">I</span></span></span><br><span class="line"><span class="class">  #31 = <span class="title">Utf8</span>               &lt;<span class="title">clinit</span>&gt;</span></span><br><span class="line"><span class="class">  #32 = <span class="title">Utf8</span>               <span class="title">SourceFile</span></span></span><br><span class="line"><span class="class">  #33 = <span class="title">Utf8</span>               <span class="title">Test</span>.<span class="title">java</span></span></span><br><span class="line"><span class="class">  #34 = <span class="title">NameAndType</span>        #23:#24        // &quot;&lt;<span class="title">init</span>&gt;&quot;:()<span class="title">V</span></span></span><br><span class="line"><span class="class">  #35 = <span class="title">NameAndType</span>        #12:#13        // <span class="title">a</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #36 = <span class="title">NameAndType</span>        #14:#13        // <span class="title">b</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #37 = <span class="title">NameAndType</span>        #15:#13        // <span class="title">c</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #38 = <span class="title">Class</span>              #46            // <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Integer</span></span></span><br><span class="line"><span class="class">  #39 = <span class="title">NameAndType</span>        #47:#48        // <span class="title">valueOf</span>:(<span class="title">I</span>)<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line"><span class="class">  #40 = <span class="title">NameAndType</span>        #19:#20        // <span class="title">e</span>:<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line"><span class="class">  #41 = <span class="title">NameAndType</span>        #21:#13        // <span class="title">f</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #42 = <span class="title">NameAndType</span>        #22:#13        // <span class="title">g</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #43 = <span class="title">NameAndType</span>        #18:#13        // <span class="title">D</span>:<span class="title">I</span></span></span><br><span class="line"><span class="class">  #44 = <span class="title">Utf8</span>               <span class="title">Test</span></span></span><br><span class="line"><span class="class">  #45 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Object</span></span></span><br><span class="line"><span class="class">  #46 = <span class="title">Utf8</span>               <span class="title">java</span>/<span class="title">lang</span>/<span class="title">Integer</span></span></span><br><span class="line"><span class="class">  #47 = <span class="title">Utf8</span>               <span class="title">valueOf</span></span></span><br><span class="line"><span class="class">  #48 = <span class="title">Utf8</span>               (<span class="title">I</span>)<span class="title">Ljava</span>/<span class="title">lang</span>/<span class="title">Integer</span>;</span></span><br><span class="line">&#123;</span><br><span class="line">  public int a;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">  private int b;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PRIVATE</span><br><span class="line"></span><br><span class="line">  public final int c;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_FINAL</span><br><span class="line">    ConstantValue: int <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  public <span class="keyword">static</span> int D;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  public java.lang.Integer e;</span><br><span class="line">    descriptor: Ljava/lang/Integer;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">  int f;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags:</span><br><span class="line"></span><br><span class="line">  protected int g;</span><br><span class="line">    descriptor: I</span><br><span class="line">    flags: ACC_PROTECTED</span><br><span class="line"></span><br><span class="line">  public Test();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: aload_0</span><br><span class="line">         <span class="number">1</span>: invokespecial <span class="comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">         <span class="number">4</span>: aload_0</span><br><span class="line">         <span class="number">5</span>: iconst_1</span><br><span class="line">         <span class="number">6</span>: putfield      <span class="comment">#2                  // Field a:I</span></span><br><span class="line">         <span class="number">9</span>: aload_0</span><br><span class="line">        <span class="number">10</span>: iconst_2</span><br><span class="line">        <span class="number">11</span>: putfield      <span class="comment">#3                  // Field b:I</span></span><br><span class="line">        <span class="number">14</span>: aload_0</span><br><span class="line">        <span class="number">15</span>: iconst_3</span><br><span class="line">        <span class="number">16</span>: putfield      <span class="comment">#4                  // Field c:I</span></span><br><span class="line">        <span class="number">19</span>: aload_0</span><br><span class="line">        <span class="number">20</span>: iconst_5</span><br><span class="line">        <span class="number">21</span>: invokestatic  <span class="comment">#5                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span></span><br><span class="line">        <span class="number">24</span>: putfield      <span class="comment">#6                  // Field e:Ljava/lang/Integer;</span></span><br><span class="line">        <span class="number">27</span>: aload_0</span><br><span class="line">        <span class="number">28</span>: bipush        <span class="number">6</span></span><br><span class="line">        <span class="number">30</span>: putfield      <span class="comment">#7                  // Field f:I</span></span><br><span class="line">        <span class="number">33</span>: aload_0</span><br><span class="line">        <span class="number">34</span>: bipush        <span class="number">7</span></span><br><span class="line">        <span class="number">36</span>: putfield      <span class="comment">#8                  // Field g:I</span></span><br><span class="line">        <span class="number">39</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">1</span>: <span class="number">0</span></span><br><span class="line">        line <span class="number">2</span>: <span class="number">4</span></span><br><span class="line">        line <span class="number">3</span>: <span class="number">9</span></span><br><span class="line">        line <span class="number">4</span>: <span class="number">14</span></span><br><span class="line">        line <span class="number">6</span>: <span class="number">19</span></span><br><span class="line">        line <span class="number">7</span>: <span class="number">27</span></span><br><span class="line">        line <span class="number">8</span>: <span class="number">33</span></span><br><span class="line"></span><br><span class="line">  public void method1();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">11</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  private void method2();</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_PRIVATE</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">0</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">14</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  public int method3();</span><br><span class="line">    descriptor: ()I</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">1</span>, args_size=<span class="number">1</span></span><br><span class="line">         <span class="number">0</span>: iconst_0</span><br><span class="line">         <span class="number">1</span>: ireturn</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">17</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    descriptor: ()V</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">0</span>, args_size=<span class="number">0</span></span><br><span class="line">         <span class="number">0</span>: iconst_4</span><br><span class="line">         <span class="number">1</span>: putstatic     <span class="comment">#9                  // Field D:I</span></span><br><span class="line">         <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line <span class="number">5</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">SourceFile: <span class="string">&quot;Test.java&quot;</span></span><br></pre></td></tr></table></figure>
<p>可以查看到类中所有的成员变量以及字节码，通过分析字节码和类中的常量池，就能对类有一个更加深入的了解。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文只是记录一下javap的简单用法，学会使用javap可以在深入理解Java基础和了解JVM时提供更大的助力，有时候遇到一些奇奇怪怪的问题，用javap反编译看一下字节码将会得到不一样的收获。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>javap</tag>
      </tags>
  </entry>
  <entry>
    <title>『缓存穿透、缓存雪崩和缓存击穿』问题及解决方案</title>
    <url>/posts/50524.html</url>
    <content><![CDATA[<p>当项目在数据库层面出现瓶颈时，添加一个缓存系统就成了一件不得不考虑的事，而设计一个完善的缓存系统，通常需要解决以下几个问题：缓存穿透、缓存雪崩和缓存击穿。</p>
<span id="more"></span>
<h3 id="缓存调用过程"><a href="#缓存调用过程" class="headerlink" title="缓存调用过程"></a>缓存调用过程</h3><p>缓存系统的调用过程是这样的：当我们请求一条数据时，先去缓存中查询，如果存在就直接返回，如果不存在就去数据库查询，然后进行缓存并返回，可以有效的减轻数据库的压力并提升响应速度。</p>
<p><img src="https://i.loli.net/2020/08/19/oUZGJqEHtsuTRv2.png" alt="50524-1.png"></p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><h4 id="什么是缓存穿透"><a href="#什么是缓存穿透" class="headerlink" title="什么是缓存穿透"></a>什么是缓存穿透</h4><p>正常情况下，查询的数据都是存在的，但是当请求查询一个一定不存在的数据时，缓存和数据库中都不存在这条记录，那么请求就会直接落到数据库上，这种直接查询数据库的现象称为缓存穿透。如果有恶意用户以不存在的key去查询数据，产生大量请求，从而导致所有的查询都落到数据库，会使数据库压力过大而影响正常服务甚至宕机。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>缓存空值或者默认值</p>
<p>这种方式简单粗暴，即使查询返回空结果，仍然对该查询进行缓存，并对其设置一个较短的过期时间，避免产生了真实的数据而无法查出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 从缓存获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> Redis.get(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != data) &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从数据库获取数据</span></span><br><span class="line">    data = DB.get(key);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> == data) &#123;</span><br><span class="line">        <span class="comment">// 如果结果为空，那么将结果赋值为空值</span></span><br><span class="line">        data = Data.Empty;</span><br><span class="line">        <span class="comment">// 将缓存过期时间设置为较短的值</span></span><br><span class="line">        expired = sort;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 缓存查询结果</span></span><br><span class="line">    Redis.add(key, data, expired);</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/08/19/ej3OYuFHgrmXSWd.png" alt="50524-2.png"></p>
<p>缓存空值虽然简单，但是弊病还是很明显的，如果有恶意攻击短时间请求大量不重复的key，那么查询依旧会落到数据库上，同时缓存系统也会缓存下大量不存在的数据，占用缓存空间，这是需要考虑到的。</p>
</li>
<li><p>布隆过滤器<br> 布隆过滤器（BloomFilter）是一个数组形式且足够大的bitmap，通过多次哈希将数据映射到bitmap中。布隆过滤器可以快速检索一个数据是否包含在它所表示的集合中，它有一个特点，不存在的数据则一定不存在，表示存在的数据则大概率存在（这和布隆过滤器的误判率有关）。当布隆过滤器应用于防止缓存穿透时，我们可以事先将缓存的数据加载到布隆过滤器中，并将布隆过滤器置于缓存系统之前。得益于布隆过滤器的特点，当请求查询一个不存在的数据时，布隆过滤器可以将其直接过滤掉，而不会落到缓存系统和数据库上。</p>
<p> <img src="https://i.loli.net/2020/08/19/J348OIs7rLNgbjq.png" alt="50524-3.png"></p>
</li>
</ol>
<p>布隆过滤器的解决之道足够优秀，但是其依旧是存在不足之处的：一是因为哈希冲突，布隆过滤器存在一定的误判率，即表示存在的结果不一定真实存在，数据库查询结果也可能为空；二是布隆过滤器没有删除操作，对于数据库删除的数据，不能达到很好的过滤效果。</p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="什么是缓存雪崩"><a href="#什么是缓存雪崩" class="headerlink" title="什么是缓存雪崩"></a>什么是缓存雪崩</h4><p>对于设置了过期时间的数据，在同一时间大规模的失效，或者缓存服务器宕机不能提供服务，导致查询直接落到数据库的现象称为缓存雪崩。缓存雪崩导致大量的请求转到数据库，在面对大量的请求时会给数据库带来巨大的压力。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>随机失效时间</p>
<p>通常在数据预热阶段，会对数据进行缓存设置，将缓存数据的过期时间在原来的基础上增加一个随时值，可以避免在某个时间出现大规模的缓存失效的情况，这样即使出现失效，也不会导致数据库瞬时负载过大而影响性能的情况。</p>
</li>
<li><p>永不过期</p>
<p>（1）在设置缓存数据时不设置过期时间，物理意义上的不过期；</p>
<p>（2）为缓存数据的过期时间进行动态设置，避免冷门数据一直占有空间。在设置缓存时，可以将过期时间存在key对应的value里，如果取出来时发现即将过期，则后台新开一个线程对该缓存数据进行更新，但是这种方案存在脏读的可能，在更新缓存期间，部分线程读取到的可能是旧数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> Redis.get(key);</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> data.getValue();</span><br><span class="line">    <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> data.getTimeout();</span><br><span class="line">    <span class="keyword">if</span> (timeout &lt;= System.currentTimeMillis()) &#123;</span><br><span class="line">        <span class="comment">// 后台异步更新</span></span><br><span class="line">        ThreadPool.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">keyMutex</span> <span class="operator">=</span> <span class="string">&quot;mutex:&quot;</span> + key;</span><br><span class="line">                <span class="comment">// 使用SETNX抢占互斥锁，设置互斥锁过期时间，避免删除失败导致锁无法释放</span></span><br><span class="line">                <span class="keyword">if</span> (Redis.setnx(keyMutex, <span class="string">&quot;1&quot;</span>, <span class="number">3</span> * <span class="number">60</span>)) &#123;</span><br><span class="line">                    <span class="type">Data</span> <span class="variable">data</span> <span class="operator">=</span> DB.get(key);</span><br><span class="line">                    Redis.set(key, data, expired);</span><br><span class="line">                    <span class="comment">// 删除互斥锁</span></span><br><span class="line">                    Redis.delete(keyMutex);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置缓存服务器集群</p>
<p>为避免缓存服务器宕机影响服务，可以采用服务器集群，保证缓存服务的高可用。比如Redis，可以使用主从、哨兵或者Cluster模式来避免全盘崩溃的情况，发生宕机也可以快速恢复重启并提供服务。</p>
</li>
</ol>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><h4 id="什么是缓存击穿"><a href="#什么是缓存击穿" class="headerlink" title="什么是缓存击穿"></a>什么是缓存击穿</h4><p>在高并发的环境中，热点数据会被大量请求，而当热点数据过期失效时，这些请求会从数据库查询数据并回设到缓存中，大量的请求落到数据库时会压力骤增，可能会压垮数据库。与缓存雪崩不同的是，缓存击穿针对的是某些访问频次极高的热点数据失效，是一个“点”，缓存雪崩是因为大面积的缓存失效，是一个“面”。</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><p>设置数据永不过期</p>
<p>此方案和缓存雪崩的永不过期方案基本类似，使缓存数据不失效即可。</p>
</li>
<li><p>限流/降级</p>
<p>对高并发的接口进行限流，常用的策略有：滑动窗格、令牌桶、漏桶等，未通过限流的请求，走服务降级，只要请求的数量不会把数据库压垮，那就不会影响系统的总体稳定，这是牺牲部分用户的体验换取的服务安全。</p>
</li>
<li><p>互斥锁</p>
<p>用互斥锁来限制查询数据库的线程数量，避免大量的请求落到数据库，单机环境可以使用<code>ReentrantLock</code>，分布式可以使用SETNX加锁，获取到锁的线程去查询数据并更新缓存，其他线程则等待重试。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> Redis.get(key);</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyMutex</span> <span class="operator">=</span> <span class="string">&quot;mutex:&quot;</span> + key;</span><br><span class="line">        <span class="comment">// 使用SETNX抢占互斥锁，单机环境可以使用其他独占锁，设置互斥锁过期时间，避免删除失败导致无法释放</span></span><br><span class="line">        <span class="keyword">if</span> (Redis.setnx(keyMutex, <span class="string">&quot;1&quot;</span>, <span class="number">3</span> * <span class="number">60</span>)) &#123;</span><br><span class="line">            value = DB.get(key);</span><br><span class="line">            Redis.set(key, value, expired);</span><br><span class="line">            Redis.delete(keyMutex);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未获取到锁的线程50毫秒后重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50L</span>);</span><br><span class="line">            <span class="comment">// 递归调用</span></span><br><span class="line">            <span class="keyword">return</span> get(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>参考：</p>
<p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506">缓存穿透，缓存击穿，缓存雪崩解决方案分析</a></p>
<p><a href="https://juejin.cn/post/6844903986475057165">《我们一起进大厂》系列-缓存雪崩、击穿、穿透</a></p>
</blockquote>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>缓存</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>从Excel生成MySQL数据表「Apache-POI」</title>
    <url>/posts/37360.html</url>
    <content><![CDATA[<p>通常在开发项目的时候，会先生成数据字段的Excel表，然后在MySQL中创建对应的数据表，字段少的时候还不是很麻烦，但是遇到字段特别多的表时，手写SQL效率会非常低下，像Navicat等图形化工具支持从Excle导入，但是操作繁琐而且容易出错，这时候就需要一些工具来帮我们生成数据表了。</p>
<span id="more"></span>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>从一个数据库设计的Excel表生成MySQL数据表，假设现在有一个设计好的Excel表结构，像下面这样，需要用它来生成数据表。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>字段名</th>
<th>类型</th>
<th>长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>ID</td>
<td>id</td>
<td>int</td>
<td>11</td>
</tr>
<tr>
<td>姓名</td>
<td>name</td>
<td>varchar</td>
<td>10</td>
</tr>
<tr>
<td>年龄</td>
<td>age</td>
<td>int</td>
<td>3</td>
</tr>
<tr>
<td>生日</td>
<td>birthday</td>
<td>date</td>
</tr>
</tbody>
</table>
</div>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>这里实现的时候使用到了Apache POI这个库，POI编写了非常多实用的API，它可以使用Java读取、创建和修改MS Excel文件，官方文档：<a href="https://poi.apache.org/">POI</a></p>
<p>实现的思路是，利用POI，可以非常方便的解析上面的Excel表，读取里面的字段值，注释，类型和长度等，再拼接成SQL，利用JDBC执行，就可以生成数据表结构了。</p>
<p>代码如下（JDK8）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.glieen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Cell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Row;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.Sheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Excel2MySQL</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, SQLException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;user.xlsx&quot;</span>;</span><br><span class="line">        <span class="type">Sheet</span> <span class="variable">sheet</span> <span class="operator">=</span> loadExcel(fileName);</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> createSQL(sheet, fileName);</span><br><span class="line">        System.out.println(sql);</span><br><span class="line">        executeSQL(sql);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Sheet <span class="title function_">loadExcel</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">excelResource</span> <span class="operator">=</span> Excel2MySQL.class.getClassLoader().getResourceAsStream(fileName);</span><br><span class="line">        Objects.requireNonNull(excelResource);</span><br><span class="line">        <span class="type">XSSFWorkbook</span> <span class="variable">wb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XSSFWorkbook</span>(excelResource);</span><br><span class="line">        <span class="keyword">return</span> wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createSQL</span><span class="params">(Sheet sheet, String fileName)</span> &#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;CREATE TABLE &quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> fileName.substring(<span class="number">0</span>, fileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        sb.append(<span class="string">&quot;`&quot;</span>).append(tableName).append(<span class="string">&quot;`(&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rowNum</span> <span class="operator">=</span> sheet.getLastRowNum();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; sheet.getLastRowNum() + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">Row</span> <span class="variable">row</span> <span class="operator">=</span> sheet.getRow(i);</span><br><span class="line">            sb.append(parseField(row));</span><br><span class="line">        &#125;</span><br><span class="line">        sb.deleteCharAt(sb.lastIndexOf(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">        sb.append(<span class="string">&quot;);&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">parseField</span><span class="params">(Row row)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">comment</span> <span class="operator">=</span> getCellValue(row.getCell(<span class="number">0</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> getCellValue(row.getCell(<span class="number">1</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> getCellValue(row.getCell(<span class="number">2</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">length</span> <span class="operator">=</span> getCellValue(row.getCell(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(length)) &#123;</span><br><span class="line">            length = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            length = <span class="string">&quot;(&quot;</span> + length + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;\n`&quot;</span> + name + <span class="string">&quot;` &quot;</span> + type + length + <span class="string">&quot; COMMENT &#x27;&quot;</span> + comment + <span class="string">&quot;&#x27;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCellValue</span><span class="params">(Cell cell)</span> &#123;</span><br><span class="line">        cell.setCellType(CellType.STRING);</span><br><span class="line">        <span class="keyword">return</span> cell.getStringCellValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">executeSQL</span><span class="params">(String sql)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement()) &#123;</span><br><span class="line">            statement.executeUpdate(sql);</span><br><span class="line">        &#125;</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="https://i.loli.net/2020/02/19/tR7fNLV4la6F5jB.jpg" alt="37360-1.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/HsoNPdLaXt4EKOx.jpg" alt="37360-2.jpg"></p>
<p>SQL语句成功打印，数据表成功创建。</p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>上面只是一个简单的Demo，当需要更多的功能，比如，自增长，主键和索引等内容时，可以对代码进行更丰富的扩充和完善。这只是简单使用了POI的一小部分，更多的处理接口还待发现。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>POI</tag>
        <tag>Excel</tag>
      </tags>
  </entry>
  <entry>
    <title>修改Ubuntu锁屏壁纸</title>
    <url>/posts/8472.html</url>
    <content><![CDATA[<p>因为学习Linux已经在Vmware装上Ubuntu有一段时间了，因为我装的是桌面版Ubuntu，所以是有GUI界面的，前几天逛知乎看到一篇修改Ubuntu解锁界面背景图片的文章，照着文章做了下，效果不错，所以在这里记录下来并分享给大家。</p>
<span id="more"></span>
<p>默认的解锁界面简洁干净</p>
<p><img src="https://i.loli.net/2020/02/19/JD8EIgjwfk7cASa.jpg" alt="8472-1.jpg"></p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>Linux版本：Ubuntu 18.04</p>
<p>一张用来做背景的图片，png或者jpg格式的都可以，分辨率1080*1920比较合适，将图片命名为background.jpg，放置到家目录下</p>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>打开终端，使用命令行把图片移动到/usr/share/backgrounds/目录下，如提示权限不足就用sudo命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> ~/background.jpg  /usr/share/backgrounds/</span><br></pre></td></tr></table></figure>
<p>打开Ubuntu的样式文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo nano /etc/alternatives/gdm3.css</span><br></pre></td></tr></table></figure>
<p>使用<code>ctrl+w</code>搜索lockDialogGroup定位到解锁样式的位置，默认样式为</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#lockDialogGroup</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2c001e</span> <span class="built_in">url</span>(<span class="string">resource:///org/gnome/shell/theme/noise-texture.png</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: repeat; &#125;</span><br></pre></td></tr></table></figure>
<p>修改为以下样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#lockDialogGroup</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#2c001e</span> <span class="built_in">url</span>(<span class="string">file:///usr/share/backgrounds/background.jpg</span>);         </span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ctrl+o</code>保存文件，然后<code>ctrl+x</code>关闭文件。</p>
<h3 id="生效"><a href="#生效" class="headerlink" title="生效"></a>生效</h3><p>使用命令行重启系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>重启系统即可看到修改后的效果了，如果对css有更多的了解，还可以定制喜欢的样式。</p>
<p><img src="https://i.loli.net/2020/02/19/fLCPKhD6Jg27Bq9.jpg" alt="8472-2.jpg"></p>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/36470249">Ubuntu18.04 更改登录界面默认背景图</a></p>
</blockquote>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>关于『怎么判断一个数是奇数』的思考</title>
    <url>/posts/62686.html</url>
    <content><![CDATA[<p>有时候，关于一个简单的问题，深入思考之后或许能发现更多不一样的东西。那么现在，我们来讨论一个简单的问题：能不能写一个方法，判断一个数是奇数？</p>
<span id="more"></span>
<p>可能我们刚看到这个问题，都会不屑的一笑，这么简单的问题，还用得着讨论吗？我觉得是有必要的。</p>
<p>像下面这样，我们很容易就能写出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好像没有问题，那能不能优化一下呢？if判断的不就是boolean值么，好像可以直接返回，然后代码可以改成这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>做到这一步好像已经很棒了，一行代码就能实现，那还能不能再优化一下呢？再看看下面的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (i &amp; <span class="number">1</span>) == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里巧妙的使用了位运算，以非常优雅简洁的方式解决了这个问题，对于计算机来说，位运算应该是最快的计算方式了。</p>
<p>通过上面对一个简单问题处理的一步步优化，我想说的的是，有时候写代码，解决一个问题，并不是能用就行了，还应当考虑，有没有更高效的方式去做更好的处理，这是值得深思的。写代码的时候如果不思考，写出来的代码将会变得臃肿，可读性也很差。如果你看过Java源码，你一定会对其中的一些代码大声惊呼的，仿佛是在看一件美丽的事物，因为里面众多的方法实现太优雅了。</p>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/57859872">记一道简单的java面试题</a></p>
</blockquote>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个简单的死锁</title>
    <url>/posts/3588.html</url>
    <content><![CDATA[<p>用Java写一个简单的死锁。<br><span id="more"></span></p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><blockquote>
<p>死锁（英语：Deadlock），又译为死结，计算机科学名词。当两个以上的运算单元，双方都在等待对方停止运行，以获取系统资源，但是没有一方提前退出时，就称为死锁。—wikipedia</p>
</blockquote>
<h3 id="Java实现"><a href="#Java实现" class="headerlink" title="Java实现"></a>Java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (b) &#123;</span><br><span class="line">                    <span class="keyword">synchronized</span> (a) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两个线程分先后顺序锁住两个对象，当一个线程锁住a对象，另一个线程锁住b对象时，两个线程都会因为无法得到另一个对象的锁而无限等待，产生死锁。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>列表循环问题</title>
    <url>/posts/4897.html</url>
    <content><![CDATA[<p>列表是Java中使用最多的数据结构之一，列表的循环也是经常会使用的操作，这是我最近在对列表循环的时候遇到的一个问题，在此记录下来。</p>
<span id="more"></span>
<h3 id="问题代码"><a href="#问题代码" class="headerlink" title="问题代码"></a>问题代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Character&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        list.add(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">        list.add(<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">        list.add(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            list.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>预期结果：</p>
<blockquote>
<p>[a, b, c, d]</p>
<p>[]</p>
</blockquote>
<p>实际结果：</p>
<blockquote>
<p>[a, b, c, d]</p>
<p>[b, d]</p>
</blockquote>
<p>根据逻辑来说，对列表进行循环，循环中移除每一个元素，看似是没有问题的，但是这里忽略了一个问题，那就是在移除元素的过程中，数组的大小其实已经变化了，实际上并没有遍历所有的元素，某些元素是被跳过了。</p>
<h3 id="还有几个错误示范"><a href="#还有几个错误示范" class="headerlink" title="还有几个错误示范"></a>还有几个错误示范</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Character character : list) &#123;</span><br><span class="line">    list.remove(character);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    <span class="type">Character</span> <span class="variable">character</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">    list.remove(character);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种方式用来移除列表中的元素都是会抛出<code>ConcurrentModificationException</code>异常的，故不可取。</p>
<h3 id="正确操作"><a href="#正确操作" class="headerlink" title="正确操作"></a>正确操作</h3><p>应对这个问题，我们可以使用迭代器来实现列表的删除元素操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Character&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    iterator.next();</span><br><span class="line">    iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用迭代器的<code>iterator.remove()</code>方法，我们就可以正常移除列表中的元素啦。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Socket</title>
    <url>/posts/42501.html</url>
    <content><![CDATA[<p>在网络编程中，我们经常提及socket，什么是socket呢？我们经常把socket翻译为套接字，socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用以实现进程在网络中通信。</p>
<span id="more"></span>
<h3 id="Java中基于TCP的Socket"><a href="#Java中基于TCP的Socket" class="headerlink" title="Java中基于TCP的Socket"></a>Java中基于TCP的Socket</h3><p>TCP协议是面向连接的、可靠的、有序的、以字节流的方式发送数据，通过三次握手方式建立连接，形成传输数据的通道。</p>
<p>Java中基于TCP实现的套接字类有Socket类和ServerSocket类，ServerSocket类用于服务器端，监听请求，Socket是在连接建立时使用的，在连接成功时，应用程序的两端都会生成一个Socket实例，对这个实例进行操作就能实现服务端和客户端的通信了。</p>
<h3 id="通信步骤"><a href="#通信步骤" class="headerlink" title="通信步骤"></a>通信步骤</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><ol>
<li>创建ServerSocket对象，绑定监听端口号；</li>
<li>通过<code>accept()</code>方法监听客户端请求；</li>
<li>连接建立之后，通过输入流读取客户端发送的请求信息；</li>
<li>通过输出流将响应信息发送到客户端；</li>
<li>关闭连接。</li>
</ol>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ol>
<li>创建Socket对象，指明需要连接的服务器的地址和端口号。</li>
<li>连接建立后，通过输出流向服务器发送请求信息。</li>
<li>通过输入流获取服务器响应的信息。</li>
<li>关闭连接。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>服务器端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">2333</span>);</span><br><span class="line">        <span class="comment">// 循环监听客户端发来的请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在监听请求...&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="comment">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Server</span>().handle(socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Socket socket)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 将字节流转换成字符流</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        <span class="keyword">while</span> (string != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">            string = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        outputStream.write(<span class="string">&quot;你好,这是服务器端回复的消息!&quot;</span>.getBytes());</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>客户端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        System.out.println(&quot;正在连接服务端...&quot;);</span><br><span class="line">        Socket socket = new Socket(&quot;127.0.0.1&quot;, 2333);</span><br><span class="line">        OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">        outputStream.write(&quot;你好,这是客户端发来的消息!&quot;.getBytes());</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        // 关闭输出流，告知服务端消息已经发送完毕</span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        System.out.println(&quot;消息发送成功&quot;);</span><br><span class="line">        BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line">        String string = reader.readLine();</span><br><span class="line">        while (string != null) &#123;</span><br><span class="line">            System.out.println(string);</span><br><span class="line">            string = reader.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为Socket是阻塞的，阻塞会发生多个地方，一个是accept方法，调用这个方法之后，服务端会一直等待，直到有客户端连接进来；第二个地方是流的读取，当服务端使用输入流读取了客户端发送的消息，而服务端没有标记消息已经发送完成，那么服务端就会一直等待，所以这里要使用<code>socket.shutdownOutput()</code>这个方法关闭客户端的输出流，告知服务端消息已经发送完成，后续的代码才会继续执行。</p>
<h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p><img src="https://i.loli.net/2020/02/19/sYPrOQogTJauCHj.jpg" alt="42501-1.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/cHAGlU3yEfKZ1gd.jpg" alt="42501-2.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/zwoZOpIbYue69L3.jpg" alt="42501-3.jpg"></p>
<h3 id="多线程处理"><a href="#多线程处理" class="headerlink" title="多线程处理"></a>多线程处理</h3><p>因为服务端是循环监听客户端的请求，那么当一个客户端建立连接，但是又长期通信的时候，其他客户端的请求将会全部阻塞，无法建立连接，所以这里改进了一下代码，使用多线程技术提高处理的效率。</p>
<p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Server</span><span class="params">(Socket socket)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.socket = socket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 创建ServerSocket实例,端口号设置为2333</span></span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">serverSocket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">2333</span>);</span><br><span class="line">        <span class="comment">// 循环监听客户端发来的请求</span></span><br><span class="line">        System.out.println(<span class="string">&quot;服务器端已启动&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在监听请求...&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            <span class="comment">// 将请求得到的socket句柄交由handle方法处理</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Server</span>(socket)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 将字节流转换成字符流</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream(), StandardCharsets.UTF_8));</span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">while</span> (string != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(string);</span><br><span class="line">                string = reader.readLine();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            outputStream.write(<span class="string">&quot;你好,这是服务器端回复的消息!&quot;</span>.getBytes());</span><br><span class="line">            outputStream.flush();</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>了解Socket对理解计算机的网络通信有更深的意义，只有掌握了应用的沟通方式才能更加得心应手的去使用代码控制它，Java对Socket的支持还是比较好的，提供了大量接口给开发者使用。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Socket</tag>
      </tags>
  </entry>
  <entry>
    <title>用Hexo搭建博客</title>
    <url>/posts/23632.html</url>
    <content><![CDATA[<p>作为一个开发者，拥有一个自己的博客来记录和分享自己的技术心得是非常有必要的，最近花了一些时间搭建了这个博客，做了一点简单的工作，在这篇文章中我会将博客的搭建过程完整的记录下来，算是一个总结，也可以帮助更多的人搭建属于自己的博客。</p>
<span id="more"></span>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo是一款基于Node.js的静态博客框架，易于安装与部署，可以快速的搭建一个个人博客，并且可以托管在Github上，是搭建博客的不二之选。Hexo有自己的官方网站和文档 (<a href="https://hexo.io">hexo.io</a>)，可以了解到它的更多细节，同时它也是Github上的一个开源项目，参见：<a href="https://github.com/hexojs/hexo">Github/Hexo</a>，Hexo同时拥有众多的主题和插件，博主可以为自己的博客定义非常多个性的元素。</p>
<p><img src="https://i.loli.net/2020/02/19/YT2VnQdOgCkfWiI.jpg" alt="23632-1.jpg"></p>
<h3 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h3><p>Hexo是基于Node.js的，所以需要安装Node.js，可以在官网下载到Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/">Node.js</a></p>
<p><img src="https://i.loli.net/2020/02/19/nvxB8zcRZfhqV4G.jpg" alt="23632-2.jpg"></p>
<p>注意安装Node.js的时候要配置好环境变量以及NPM，安装完成之后在命令行输入： <code>node -v</code>和<code>npm -v</code>，能正确显示它们的版本号即成功了。</p>
<p><img src="https://i.loli.net/2020/02/19/bMGxo1LvUYh5fgi.jpg" alt="23632-3.jpg"></p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>因为会用到Github上的一些开源项目，博客系统也要托管到Github上，所以需要安装上Git用来做项目的同步，Git也可以去官网下载，下载地址：<a href="https://git-scm.com/download">Git</a></p>
<p><img src="https://i.loli.net/2020/02/19/E9KWgyBZOPFlfXw.jpg" alt="23632-4.jpg"></p>
<p>Git安装完成之后，右键菜单会多出bash终端的选项</p>
<p><img src="https://i.loli.net/2020/02/19/6JPHQLubjrcDA5O.jpg" alt="23632-5.jpg"></p>
<p>进入终端输入：<code>git --version</code>，正确显示git 的版本号即安装成功</p>
<p><img src="https://i.loli.net/2020/02/19/EYivdTXLWz9VB5j.jpg" alt="23632-6.jpg"></p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>环境安装配置好之后，就可以开始安装Hexo了，安装过程非常简单。在资源管理器中右键，打开bash终端，创建文件夹，并定位到文件夹位置。</p>
<p><img src="https://i.loli.net/2020/02/19/7HpVZcEukPNtfR5.jpg" alt="23632-7.jpg"></p>
<p>运行<code>npm install -g hexo-cli</code>安装Hexo脚手架</p>
<p><img src="https://i.loli.net/2020/02/19/OIehiZsKpuCvWFL.jpg" alt="23632-8.jpg"></p>
<p>运行<code>hexo init</code>初始化Hexo框架</p>
<p><img src="https://i.loli.net/2020/02/19/5hKSJlIcgj8EQPG.jpg" alt="23632-9.jpg"></p>
<p>到这里Hexo的安装已经完成了</p>
<h3 id="启动Hexo"><a href="#启动Hexo" class="headerlink" title="启动Hexo"></a>启动Hexo</h3><p>安装完成之后，接下来介绍几个简单的命令，用以编辑和启动Hexo。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译博客</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 启动Hexo(-i绑定IP，-p绑定端口)</span></span><br><span class="line">hexo s [-i] [-p]</span><br><span class="line"><span class="comment"># 清理编译文件</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 新建文章</span></span><br><span class="line">hexo new [post] <span class="string">&quot;postName&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/19/Etfq64ZGJL52OMX.jpg" alt="23632-10.jpg"></p>
<p>Hexo启动成功即可访问Hexo绑定的IP和端口查看博客了，默认的URL是：<a href="http://localhost:4000">http://localhost:4000</a></p>
<p><img src="https://i.loli.net/2020/02/19/37iZ5BvLzbCmpqu.jpg" alt="23632-11.jpg"></p>
<p>访问到如图所示页面即表示Hexo已成功部署并启动了。</p>
<h3 id="Hexo文件结构"><a href="#Hexo文件结构" class="headerlink" title="Hexo文件结构"></a>Hexo文件结构</h3><p>用资源管理器打开博客目录，查看文件结构</p>
<p><img src="https://i.loli.net/2020/02/19/Dri4avWX5KQ92SY.jpg" alt="23632-12.jpg"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 简单介绍下目录构成</span></span><br><span class="line">public：博客的发布文件，最终生成的文件</span><br><span class="line">scaffolds：创建文章的模板，可以自定义创建格式</span><br><span class="line"><span class="built_in">source</span>：文章的源代码文件，markdown文件</span><br><span class="line">themes：Hexo的主题目录</span><br><span class="line">_config.yml：Hexo的主配置文件</span><br><span class="line"><span class="comment"># 每个主题里面也有一个_config.yml，我们称之为主题配置文件，之后会讲到</span></span><br></pre></td></tr></table></figure>
<h3 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发表新文章</span></span><br><span class="line">hexo new [post] <span class="string">&quot;postName&quot;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://i.loli.net/2020/02/19/rKdoOzIJGsjvWV7.jpg" alt="23632-13.jpg"></p>
<p>Hexo的文章编写是基于Markdown语法的，Markdown不过多介绍，想了解更多Markdown的知识，前往<a href="https://zh.wikipedia.org/wiki/Markdown">维基百科-Markdown</a>。这里介绍一款非常好用的Markdown编辑器：<a href="https://typora.io/">Typora</a>，可以前往官网下载，支持多平台运行，实时预览。用Typora打开刚刚新建的md文件，即可对文章进行编辑操作。</p>
<p><img src="https://i.loli.net/2020/02/19/Amsjtzg83NvkZVf.jpg" alt="23632-14.jpg"></p>
<p>编辑完成之后重新编译并启动Hexo即可查看刚发布的文章了。</p>
<p><img src="https://i.loli.net/2020/02/19/tIav4KzgyqjskLP.jpg" alt="23632-15.jpg"></p>
<h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>修改配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br><span class="line">  message: [message]</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>repo</code></td>
<td>库（Repository）地址</td>
</tr>
<tr>
<td><code>branch</code></td>
<td>分支名称。如果您使用的是 GitHub 或 GitCafe 的话，程序会尝试自动检测。</td>
</tr>
<tr>
<td><code>message</code></td>
<td>自定义提交信息</td>
</tr>
</tbody>
</table>
</div>
<p>配置完成之后运行命令<code>hexo d</code>即可进行部署。</p>
<h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>Hexo默认的主题并不美观，得益于Hexo庞大的主题库，我们可以使用自己喜欢的主题样式，并添加自定义的一些功能，这里我选用的是<a href="https://theme-next.iissnan.com/">NexT</a>，这套主题简洁明了，非常不错。</p>
<p><strong>获取主题：</strong>在终端窗口下，定位到 Hexo 站点目录下。使用 <code>Git</code> checkout 代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<p><strong>使用主题：</strong>与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 <code>theme</code> 字段，并将其值更改为 <code>next</code>。</p>
<p>启用 NexT 主题</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。编译并启动Hexo即可看到应用主题后的样式。</p>
<p><img src="https://i.loli.net/2020/02/19/viMnT73XKdrA8OG.jpg" alt="23632-16.jpg"></p>
<p>更多详细的主题配置请参阅NexT的官方文档：<a href="https://theme-next.iissnan.com/theme-settings.html">主题配置</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Hexo的简单搭建部署就是这样，其他更多的一些设置会在之后的文章中补充。</p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>简单高效的双拼输入法 - 小鹤双拼</title>
    <url>/posts/27949.html</url>
    <content><![CDATA[<p>从接触小鹤双拼到现在已经一个月了，记录下学习的经过和使用体会。</p>
<span id="more"></span>
<h3 id="初识"><a href="#初识" class="headerlink" title="初识"></a>初识</h3><p>在输入法上，之前电脑上使用的一直是微软拼音输入法，手机上使用的是9键全拼，谈不上输入快慢的问题，工作生活都不耽误。其实很早之前就听说过双拼输入法，在各大输入法和各个系统中也都有内置的双拼方案，只是没有详细的了解过，只知道是把拼音拆分成声母和韵母，分散到键盘中，通过两次击键组合出全部拼音。</p>
<p>上个月的某一天，我无聊刷知乎的时候看到一个问题，知乎：<a href="https://www.zhihu.com/question/50280188">为什么小鹤双拼这么容易，但是没人学呢？</a>，这吸引了我的注意，第一次了解到了小鹤双拼。看了不少讨论，总结了下回答中提到的几点：</p>
<ol>
<li>相对于全拼输入法和五笔输入法来说，双拼输入法确实比较小众；</li>
<li>双拼有很多方案，熟知的有：微软双拼、智能ABC、自然码、小鹤等；</li>
<li>双拼是对全拼的简化，降低了按键的次数，使用它需要一定的学习和适应过程，需要熟知键位；</li>
<li>小鹤有小鹤双拼和小鹤音形，小鹤音形是在小鹤双拼的基础上进行形码定字，四码上屏，可以实现完全盲打，有点五笔内味儿。</li>
</ol>
<h3 id="学习和适应"><a href="#学习和适应" class="headerlink" title="学习和适应"></a>学习和适应</h3><p>在大概了解了小鹤双拼之后，我决定尝试学习并使用它。我选择的是小鹤双拼而不是小鹤音形进行学习，原因有两点：第一，小鹤双拼相较于小鹤音形来说学习成本要低一些，适应的过程不会那么陡峭，不用去记那么多的字根；第二，基于现在的网络环境，大多数输入的情况下都是只知其音而不知其形，所谓的提笔忘字，所以显然用拼音来输入是更加适合的。</p>
<p>小鹤双拼官网：<a href="https://www.flypy.com/">小鹤双拼·小鹤音形</a></p>
<p>小鹤双拼方案：</p>
<ul>
<li><p>双拼方案：使用两个字母对汉字进行编码的方案</p>
<p>第一个字母表示声母，第二字母表示韵母，没有声母时用零声母代替</p>
<p>单字母声母韵母键位不变，双字母声母和多字母韵母位置见“双拼键位图”</p>
</li>
<li><p>零声母方案：指全拼中无声的母韵母音节在双拼中的处理方案</p>
<p>本方案以韵母首字母为零声母，即把韵母的首字母当作声母</p>
<p>单字母韵母，零声母 + 韵母所在键，如： 啊=aa 哦=oo 额=ee</p>
<p>双字母韵母，零声母 + 韵母末字母，如： 爱=ai 恩=en 欧=ou</p>
<p>三字母韵母，零声母 + 韵母所在键，如： 昂=ah</p>
<p>简单说：双字母音节保持全拼方式，一三字母音节为首字母加韵母所在键</p>
</li>
</ul>
<p>小鹤双拼键位图（引用知乎网友的图：<a href="https://www.zhihu.com/question/20698750/answer/248538450">怎样记忆双拼输入法？</a>）：</p>
<p><img src="https://i.loli.net/2021/06/09/MPknehdaFCGWu89.jpg" alt="27949-1.jpg"></p>
<p>为了强迫自己使用小鹤双拼输入，我修改了电脑的默认输入法，移除了除双拼以外的所有输入方式，并且将上面的键位图作为电脑壁纸，打字卡住的时候就切到桌面看一眼加强记忆。手机上也移除了除小鹤双拼以外的所有输入法，iOS自带小鹤双拼，倒是省去了下载其他输入法的过程。</p>
<p>走出舒适区并改变坚持了许久的输入习惯是需要适应时间的，开始使用的前几天还是非常地难受。使用电脑的时候打字总是不自主地使用全拼，然后就是桌面壁纸到输入的来回切换；使用手机的时候打字巨慢，聊个天简直就是折磨，好几次都想放弃切换回原来的输入法。</p>
<p>这种困难的过程在坚持了大概一周左右得到了好转，键位已经基本了然于心，已经不用再去看键位图了。打字的速度也跟了上来，相较于全拼来说确实减少了不少键盘的敲击次数，开始享受这种有节奏的键盘敲击感，现在已经可以做到使用双拼输入无压力了，这篇文章就是使用小鹤双拼书写的。</p>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>因为使用小鹤双拼，手机（iOS）和电脑（微软输入法）的输入法失去了智能云拼音联想功能，好像都没有针对双拼的词语联想方案，虽然大部分常用的字词都其实基本都不需要翻页，但是某些不常用字词需要往后翻好几页才能找到。还有一点遗憾是在把微软输入法切换成双拼方案之后，候选字中就没有emoji和颜文字了，有点可惜啊。但好在U模式和V模式都得到了保留，在遇到某些生僻字的时候还是非常有用的。</p>
<p>微软输入法全拼输入下的emoji和颜文字：</p>
<p><img src="https://i.loli.net/2021/06/09/9BofhivL8SKIcmM.png" alt="27949-2.png"></p>
<p>微软输入法双拼输入下的U模式（输入大写U过后可以进行拆分输入）：</p>
<p><img src="https://i.loli.net/2021/06/09/E487rQqy5mLucwZ.png" alt="27949-3.png"></p>
<h3 id="微软输入法添加小鹤双拼方案"><a href="#微软输入法添加小鹤双拼方案" class="headerlink" title="微软输入法添加小鹤双拼方案"></a>微软输入法添加小鹤双拼方案</h3><p>微软输入法自带的双拼方案只有微软双拼、智能ABC和自然码，没有小鹤双拼，但是可以添加自定义的双拼方案，在微软拼音输入法的常规设置中添加小鹤双拼的键位映射就可以了。</p>
<p><img src="https://i.loli.net/2021/06/09/NRubnHpUtjPxSId.png" alt="27949-4.png"></p>
<p>当然，还有更加方便的方式可以添加小鹤双拼，就是利用注册表直接导入，将以下代码复制到文本中，然后把文件扩展名改为<code>.reg</code>直接执行即可为微软输入法导入小鹤双拼方案了。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS]</span><br><span class="line">&quot;UserDefinedDoublePinyinScheme0&quot;=&quot;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：</p>
<p><a href="https://www.flypy.com/bbs/forum.php?mod=viewthread&amp;tid=166">windows10小鹤双拼注册表（内置输入法的自定义）</a></p>
</blockquote>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>小鹤双拼</tag>
        <tag>输入法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 单例模式</title>
    <url>/posts/57015.html</url>
    <content><![CDATA[<p>单例模式，也叫单子模式，是一种常用的软件设计模式，属于创建型模式的一种。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。——《维基百科》</p>
<span id="more"></span>
<p>单例模式在开发中应用非常广泛，某些对象的构造可能会非常耗费资源，在整个软件周期中我们只想让其存在一个实例，或者作为全局通用对象，我们希望它在任意地方的访问取得一致的结果，那就可以使用单例模式，像Servlet，Spring中的Bean默认都是单例的。单例模式的实现方式有好几种，本文主要记录在Java下单例模式的具体实现方式。</p>
<h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>饿汉式是在类加载时就完成了单例的初始化，使用时直接获取。基于类的加载机制避免了多线程环境下的同步问题，但是初始化的实例可能并未使用，导致资源浪费，同时也无法避免反射，反序列化带来的影响。</p>
<h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>懒汉式是在第一次获取实例的时候进行单例初始化，对获取方法加synchronized同步锁，保证了线程安全，也存在反射和反序列化的问题。</p>
<h3 id="双重检查锁"><a href="#双重检查锁" class="headerlink" title="双重检查锁"></a>双重检查锁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大名鼎鼎的DCL，饿汉式的优化版本，使用双重检查锁保证了线程安全，同时降低了在多线程环境下的加锁竞争，volatile关键字的应用典范（变量多线程可见性）。</p>
<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态内部类的方式较之前的几种都有了不小的提升，因为基于类的加载机制进行初始化，防止了线程安全的问题，同时只有在调用获取实例方法时才会触发第一次加载，也实现了懒加载机制，写法也比较简单，算是一种比较良好的实现方式了。</p>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>嗯，枚举实现单例就是这么简单且纯粹。同时基于对枚举的特殊处理机制，保证了线程安全，也规避了反射和反序列化对单例带来的破坏，这是我最常用来实现单例的方式。</p>
<h3 id="反射和反序列化对单例的破坏"><a href="#反射和反序列化对单例的破坏" class="headerlink" title="反射和反序列化对单例的破坏"></a>反射和反序列化对单例的破坏</h3><h4 id="反射破坏单例模式"><a href="#反射破坏单例模式" class="headerlink" title="反射破坏单例模式"></a>反射破坏单例模式</h4><p>以静态内部类为例，反射获取单例类的构造器，变更构造器的访问权限之后可以直接实例化，生成与单例接口返回不一致的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 反射并实例化</span></span><br><span class="line">        Class&lt;Singleton&gt; clazz = Singleton.class;</span><br><span class="line">        Constructor&lt;Singleton&gt; constructor = clazz.getDeclaredConstructor();</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">refObject</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">        System.out.println(<span class="string">&quot;singleton:&quot;</span> + Singleton.getInstance().hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;refObject:&quot;</span> + refObject.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;equals:&quot;</span> + (refObject == Singleton.getInstance()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// singleton:460141958</span></span><br><span class="line"><span class="comment">// refObject:1163157884</span></span><br><span class="line"><span class="comment">// equals:false</span></span><br></pre></td></tr></table></figure>
<p>想要阻止反射对单例的破坏，可行的方法是在构造器中抛出异常，禁止反射对构造器的调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 禁止反射调用构造器</span></span><br><span class="line">    <span class="keyword">if</span> (SingletonHolder.INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="反序列化破坏单例"><a href="#反序列化破坏单例" class="headerlink" title="反序列化破坏单例"></a>反序列化破坏单例</h4><p>还是以静态内部类为例，对象实现序列化接口后，对其进行序列化，把它写入文件中，然后再反序列化读出来，生成与单例接口返回不一致的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 先序列化然后再反序列化</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>) + <span class="string">&quot;/file&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path))) &#123;</span><br><span class="line">            out.writeObject(Singleton.getInstance());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path))) &#123;</span><br><span class="line">            <span class="type">Singleton</span> <span class="variable">inObject</span> <span class="operator">=</span> (Singleton) in.readObject();</span><br><span class="line">            System.out.println(<span class="string">&quot;singleton:&quot;</span> + Singleton.getInstance().hashCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;inObject:&quot;</span> + inObject.hashCode());</span><br><span class="line">            System.out.println(<span class="string">&quot;equals:&quot;</span> + (inObject == Singleton.getInstance()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// singleton:1735600054</span></span><br><span class="line"><span class="comment">// inObject:1452126962</span></span><br><span class="line"><span class="comment">// equals:false</span></span><br></pre></td></tr></table></figure>
<p>阻止反序列化对单例的破坏，可以禁止序列化，禁止反序列化，也可以重写<code>readResolve()</code>方法，使其返回单例对象。</p>
<p>禁止序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream oos)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 阻止对象序列化</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>禁止反序列化：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> &#123;</span><br><span class="line">  <span class="comment">// 阻止对象反序列化</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以在构造器中禁止反序列化，因为反序列化时，会利用反射调用类中的构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 禁止反射调用构造器</span></span><br><span class="line">    <span class="keyword">if</span> (SingletonHolder.INSTANCE != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;not allow&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重写<code>readResolve()</code>方法，直接返回单例对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举单例为什么可以防止反射和序列化的破坏"><a href="#枚举单例为什么可以防止反射和序列化的破坏" class="headerlink" title="枚举单例为什么可以防止反射和序列化的破坏"></a>枚举单例为什么可以防止反射和序列化的破坏</h4><p>这是Constructor中生成实例的方法，可以看到当类对象是枚举时，会直接抛出IllegalArgumentException异常，禁止反射生成枚举的实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Constructor的newInstance方法</span></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(Object ... initargs)</span></span><br><span class="line">    <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span><br><span class="line">           IllegalArgumentException, InvocationTargetException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="comment">// 当实例化类是枚举时，抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="type">T</span> <span class="variable">inst</span> <span class="operator">=</span> (T) ca.newInstance(initargs);</span><br><span class="line">    <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在ObjectInputStream类中，反序列化枚举对象时，会调用<code>readEnum()</code>方法，然后调用Enum类的<code>valueOf()</code>方法直接返回枚举的实例，所以可以保证实例的唯一性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ObjectInputStream的readEnum方法</span></span><br><span class="line"><span class="keyword">private</span> Enum&lt;?&gt; readEnum(<span class="type">boolean</span> unshared) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">if</span> (cl != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            <span class="comment">// 调用Enum的valueOf方法</span></span><br><span class="line">            Enum&lt;?&gt; en = Enum.valueOf((Class)cl, name);</span><br><span class="line">            result = en;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (IOException) <span class="keyword">new</span> <span class="title class_">InvalidObjectException</span>(</span><br><span class="line">                <span class="string">&quot;enum constant &quot;</span> + name + <span class="string">&quot; does not exist in &quot;</span> +</span><br><span class="line">                cl).initCause(ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!unshared) &#123;</span><br><span class="line">            handles.setObject(enumHandle, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Enum的valueOf方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                            String name)</span> &#123;</span><br><span class="line">    <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">        <span class="string">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式和七大原则</title>
    <url>/posts/10653.html</url>
    <content><![CDATA[<p>设计模式是对面向对象中反复出现的问题的解决方案，代表了软件开发中的最佳实践，是软件工程的基石。使用设计模式是为了代码重用，让代码更容易被人理解，保证代码的可靠性，这在软件设计和团队开发中是非常重要的。在Java源码，Spring，MyBatis等框架中，设计模式被大量的运用。</p>
<span id="more"></span>
<h3 id="设计模式分类"><a href="#设计模式分类" class="headerlink" title="设计模式分类"></a>设计模式分类</h3><p>常用的设计模式共23种，它们根据不同的特点分为三大类：</p>
<ul>
<li>创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式；</li>
<li>结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式；</li>
<li>行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式、访问者模式。</li>
</ul>
<h3 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h3><p>面向对象的设计模式通常遵循七大原则，有的文章说是六大原则，不包含合成/聚合复用原则，但是在《Effective Java》对此原则进行了重点说明，我更愿意把它加入其中。</p>
<h4 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h4><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。在软件开发周期中，因为变化、升级或者维护对原有代码进行修改时，可能会给旧的代码引入错误。所以当软件需要变更时，尽量对原有代码实体进行扩展，而不是通过修改已有代码来实现变化。</p>
<p>开闭原则是面向对象设计中最基础的设计原则，它指导我们应尽量在不修改原有代码的情况下进行功能扩展。</p>
<h4 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h4><p>单一职责原则指的是不要存在多于一个导致类变更的原因。通俗的说，即一个类只负责一项职责。在开发中，因为功能的增多，通常会发生职责扩散，导致修改一个功能会导致其他的功能出现故障，而遵循单一职责原则可以避免此情况的发生。</p>
<p>单一职责原则可以降低代码的耦合性，利于代码的阅读和维护，降低了因为代码修改而对其他模块造成的影响。</p>
<h4 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h4><p>里氏代换原则的定义是：所有引用基类的地方必须能透明地使用其子类的对象，也可以简单理解为任何基类可以出现的地方，子类一定可以出现。里氏替换原则是对开闭原则的具体补充，实现开闭原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p>
<p>里氏替换原则可以提高代码的复用性，在基类能够使用的地方，它的子类必然也能够使用，这极大的提升了代码的扩展性。</p>
<h4 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h4><p>高层模块不应该依赖低层模块，高层模块和低层模块都应该依赖于抽象；抽象不应该依赖于实现，实现应该依赖于抽象。在创建关联关系时（比如方法传参，格式转换），尽量引用抽象层次更高的模块，而不要用具体的实现来做这些。</p>
<p>面向接口编程是对此原则的最佳实践，使用高层次的依赖可以提升系统的扩展性，可以在不改变原有代码的情况下扩展系统。</p>
<h4 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h4><p>接口隔离原则的定义是客户端不应该依赖它不需要的接口，类间的依赖关系应该建立在最小的接口上。简单来说就是建立单一的接口，不要建立臃肿庞大的接口。也就是接口尽量细化，同时接口中的方法尽量少。当一个接口太大时，我没应该想办法把它分割成一些功能更简单，更细小的接口。</p>
<p>接口隔离原则细化了接口的职责，降低了接口的复杂度，提高了接口的内聚性。</p>
<h4 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h4><p>迪米特法则指的是一个对象应该对其他对象保持最少的了解。类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大，迪米特法则不希望类之间建立过多直接的联系。</p>
<p>迪米特法则强调尽量少地建立类与类之间的关联，降低代码之间的耦合度，提升代码的复用性，避免因为代码的修改造成过多的影响。</p>
<h4 id="合成-聚合复用原则"><a href="#合成-聚合复用原则" class="headerlink" title="合成/聚合复用原则"></a>合成/聚合复用原则</h4><p>在软件开发中，尽量使用合成/聚合，而不是通过继承达到复用的目的。合成/聚合复用原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分；新的对象通过向内部持有的这些对象的委派达到复用已有功能的目的，而不是通过继承来获得已有的功能。</p>
<p>《Effective Java》有讲到，只有明确知道派生类和基类满<code>IS A</code>的时候才选用继承，当满足<code>HAS A</code>或者不能判断的情况下应该选用合成/聚合。因为在使用基础时，基类是完全暴露给派生类的，此时会有一个明显的问题：派生类继承自基类，如果基类的行为发生改变，将会影响到所有派生类的实现。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>对这七大原则的遵守并不是是和否的问题，而是多和少的问题，也就是说，我们一般不会说有没有遵守，而是说遵守程度的多少。任何事都是过犹不及，设计模式的七大设计原则也是一样，制定这七大原则的目的并不是要我们刻板的遵守他们，而需要根据实际情况灵活运用。对他们的遵守程度只要在一个合理的范围内，就算是良好的设计。</p>
<blockquote>
<p>参考：</p>
<p><a href="http://www.uml.org.cn/sjms/201211023.asp">设计模式六大原则</a></p>
<p><a href="https://cloud.tencent.com/developer/article/1650116">设计模式概念和七大原则</a></p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>七大原则</tag>
      </tags>
  </entry>
  <entry>
    <title>配置Github公钥</title>
    <url>/posts/57365.html</url>
    <content><![CDATA[<p>大多数 Git 服务器都会选择使用 SSH 公钥来进行授权,系统中的每个用户都必须提供一个公钥用于授权，没有的话就要生成一个。生成公钥的过程在所有操作系统上都差不多。</p>
<span id="more"></span>
<h3 id="公钥和私钥"><a href="#公钥和私钥" class="headerlink" title="公钥和私钥"></a>公钥和私钥</h3><p>SSH公钥默认储存在用户的家路径的<code>.ssh</code>目录下，Windows为<code>C:\Users\用户名\.ssh</code>目录，Linux为<code>~/.ssh</code>目录，下图为Windows下的文件列表。</p>
<p><img src="https://i.loli.net/2020/02/19/FeAJUcwgIEmNZaK.jpg" alt="57365-1.jpg"></p>
<p><code>id_rsa</code>为私钥文件，<code>id_rsa.pub</code>为公钥文件。</p>
<h3 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h3><ol>
<li>确保家路径下没有<code>.ssh</code>目录，有则先删除该文件夹；</li>
<li>打开bash终端，运行<code>ssh-keygen</code>工具；</li>
<li>会有三次提示操作，第一次是确认生成密钥的目录，默认是家路径下的 <code>.ssh</code>目录，第二次和第三次是提示输入密码和确认密码，可以为空；</li>
<li>生成成功。</li>
</ol>
<p><img src="https://i.loli.net/2020/02/19/3G9geqJkfaWmIMA.jpg" alt="57365-2.jpg"></p>
<p>生成后的公钥大概就是这个样子：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDiupK6UEUhjsa/E7+lRx1WJpEE+arG6YiWJ5cdFCyHuXq3X+2anW7C68X6Wn41eivFmEcD4fXP8/ZM5x40spFfXsvE3qAAAZUxF9HDM0gj9zojaz9P1QtF1dqZKTiBszi9c0kPgb3iR24h6H+NzmX06dVp4PPv6Zlci7TEAf9gsFot1reEtT0Bp+jVivEutvz231A3pZcUBuYkGCXdfvw7gbT5NPFlVm8l+kY8xBbJ6sMXKWDO06Kx/aEpUbDHPsxlD4Vmu0A6NSjtxATjG9xEeaNHct2Ry6jpOWE28xIYYtS3b5FAx4k4XEULYWIMMersdwHA768LGnWibh9W9IUJ Glieen@Firefly</span><br></pre></td></tr></table></figure>
<h3 id="配置SSH到Github"><a href="#配置SSH到Github" class="headerlink" title="配置SSH到Github"></a>配置SSH到Github</h3><ol>
<li>登录Github并打开SSH配置链接：<a href="https://github.com/settings/keys">Github-Keys</a>；</li>
<li>点击<code>New SSH Key</code>，Title可以随意命名，将公钥文件<code>id_rsa.pub</code>里的内容复制并粘贴到Key文本框中，点击<code>Add SSH Key</code>即可成功添加；</li>
<li>打开bash终端，输入：<code>ssh git@github.com</code>可以测试是否配置成功。</li>
</ol>
<p><img src="https://i.loli.net/2020/02/19/cJbe6UEwNxhoFsj.jpg" alt="57365-3.jpg"></p>
<p><img src="https://i.loli.net/2020/02/19/cuYipBlCsr4vPTU.jpg" alt="57365-4.jpg"></p>
]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>链表中的快慢指针问题</title>
    <url>/posts/29294.html</url>
    <content><![CDATA[<p>链表应该是最常见的数据结构之一了，编程中经常使用到，由于其独特的特性，增删和修改都极其高效，但是随机读写却不如数组。在随机读写中，有一种巧妙的方式可以显著提升效率：快慢指针。</p>
<span id="more"></span>
<h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><p>在遍历链表是使用步长一大一小的两个指针，因为步长不同，所以在从头遍历时，步长大的相对于步长小的看起来就跑的更“快”，这就是快慢指针了，可以用快慢指针来解决不少链表中的问题。</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>编程语言使用Java，实现一个简单的链表结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedNode</span>&lt;T&gt; &#123;</span><br><span class="line">    Node&lt;T&gt; head;</span><br><span class="line">    Node&lt;T&gt; tail;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node&lt;T&gt; <span class="title function_">add</span><span class="params">(T t)</span> &#123;</span><br><span class="line">        Node&lt;T&gt; node = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;();</span><br><span class="line">        node.value = t;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;</span><br><span class="line">            head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tail.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        tail = node;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 节点</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;T&gt; &#123;</span><br><span class="line">    T value;</span><br><span class="line">    Node&lt;T&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="找到链表的中间节点"><a href="#找到链表的中间节点" class="headerlink" title="找到链表的中间节点"></a>找到链表的中间节点</h3><p>给定一个链表和其头节点，找到它的中间节点。</p>
<h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>常规思路是进行两次遍历，第一次遍历取得链表的长度，第二次遍历找到中间节点。但是使用快慢指针，一次遍历就能实现，只需将快指针步长设为2，慢指针步长设为1，当快指针遍历到链表尾指向<code>null</code>时，慢指针恰好指向链表的中点。其实这种方法不仅可以找到链表的中间节点，找到2/3处，或者3/5处的节点也是同理，快慢指针按比例设置步长即可。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; Node&lt;T&gt; <span class="title function_">getMidNode</span><span class="params">(LinkedNode&lt;T&gt; linkedNode)</span> &#123;</span><br><span class="line">    Node&lt;T&gt; fast = linkedNode.head;</span><br><span class="line">    Node&lt;T&gt; slow = linkedNode.head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="找到链表倒数第n个节点"><a href="#找到链表倒数第n个节点" class="headerlink" title="找到链表倒数第n个节点"></a>找到链表倒数第n个节点</h3><p>给定一个链表和其头节点，找到它的倒数第n个节点。</p>
<h4 id="解决思路-1"><a href="#解决思路-1" class="headerlink" title="解决思路"></a>解决思路</h4><p>使用快慢指针，先让快指针跑到第n个节点，慢指针指向头节点，然后以同样的速度向后遍历，当快指针遍历到链表尾指向<code>null</code>时，慢指针恰好指向链表的倒数第n个节点。</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Node&lt;T&gt; <span class="title function_">getLastN</span><span class="params">(LinkedNode&lt;T&gt; linkedNode, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">    Node&lt;T&gt; fast = linkedNode.head;</span><br><span class="line">    Node&lt;T&gt; slow = linkedNode.head;</span><br><span class="line">    <span class="comment">// 快指针先向前跑n个节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断链表中是否有环"><a href="#判断链表中是否有环" class="headerlink" title="判断链表中是否有环"></a>判断链表中是否有环</h3><p>给定一个链表和其头节点，判断链表中是否存在环。</p>
<h4 id="解决思路-2"><a href="#解决思路-2" class="headerlink" title="解决思路"></a>解决思路</h4><p>使用快慢指针，将快指针步长设为2，慢指针步长设为1，从头遍历链表，如果快指针和慢指针相遇，那么链表中则存在环，否则无环。这里可以用赛跑类比：有两个人（A和B）比赛跑步，A跑的比B快，如果是在一条直线跑道上比赛，从同一个起点出发，一直跑下去的话，A与B相距一定越来越远。但是如果将跑道换成环形，一直跑下去的话，A一定会再次与B相遇。</p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">existRing</span><span class="params">(LinkedNode&lt;T&gt; linkedNode)</span> &#123;</span><br><span class="line">    Node&lt;T&gt; fast = linkedNode.head;</span><br><span class="line">    Node&lt;T&gt; slow = linkedNode.head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        <span class="comment">// 快慢指针相遇，则存在环</span></span><br><span class="line">        <span class="keyword">if</span> (fast == slow) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断链表中是否有环并找出环的入口"><a href="#判断链表中是否有环并找出环的入口" class="headerlink" title="判断链表中是否有环并找出环的入口"></a>判断链表中是否有环并找出环的入口</h3><p>给定一个链表和其头节点，判断链表中是否存在环，如果存在环的话，找出环的入口。</p>
<h4 id="解决思路-3"><a href="#解决思路-3" class="headerlink" title="解决思路"></a>解决思路</h4><p>先使用上面的方法判断出链表中是否有环，假设存在环，并且快指针和慢指针在C节点相遇，A-&gt;B长度为a，B-&gt;C长度为b，C-&gt;B长度为c，那么可以得出：2 <em> (a + b) = a + b + n </em> (b + c)，快指针走过的长度为慢指针的两倍，且快指针可能在环中绕了n圈，化简得到：a = n * (b + c) - b，据此分析，可以发现a的长度等于在环中绕n圈再减去b的长度，所以这里可以设置两个指针，一个在A节点，一个在C节点，且以同样的速度前行，两个指针再次相遇的节点即是环的入口。</p>
<p><img src="https://i.loli.net/2020/09/14/r86jwBGfJxSty3p.png" alt="29294-1.png"></p>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; Node&lt;T&gt; <span class="title function_">findEntrance</span><span class="params">(LinkedNode&lt;T&gt; linkedNode)</span> &#123;</span><br><span class="line">    Node&lt;T&gt; fast = linkedNode.head;</span><br><span class="line">    Node&lt;T&gt; slow = linkedNode.head;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 不存在环</span></span><br><span class="line">        <span class="keyword">if</span> (fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125; <span class="keyword">while</span> (fast != slow);</span><br><span class="line">    <span class="comment">// 将慢指针设置为链表头节点</span></span><br><span class="line">    slow = linkedNode.head;</span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/38521018">链表与快慢指针</a></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>链表</tag>
      </tags>
  </entry>
</search>
